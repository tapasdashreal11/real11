{"version":3,"sources":["jquery-next-in-dom.js"],"names":["$","nextInDOM","_selector","_subject","_maxNodes","_lastNode","nid","next","getNext","iters","addClass","length","is","removeClass","hasClass","children","first","parent","prevInDOM","_firstNode","prev","getPrev","p","last","fn","selector","element","this","jQuery"],"mappings":"AAAA,cAAA,SAAWA,GAgBP,QAASC,GAAUC,EAAWC,EAAUC,EAAWC,GAC/C,GAAIC,GAAMN,IACNO,EAAOC,EAAQL,EAAUE,GACzBI,EAAQ,CAEZ,KADAT,EAAE,cAAcU,SAAS,SACF,IAAhBH,EAAKI,QAAc,CACtB,GAAIF,EAAQL,EAAW,MAAOJ,IAC9B,IAAIO,EAAKK,GAAGV,GAAY,CACpBI,EAAMC,CACN,OAEJA,EAAOC,EAAQD,EAAMF,GACrBI,IAGJ,MADAT,GAAE,UAAUa,YAAY,SACjBP,EAeX,QAASE,GAAQL,EAAUE,GACvB,MAAIF,GAAS,IAAME,EAAU,GAAWL,KAClCG,EAASW,SAAS,UAAaX,EAASY,WAAWJ,OAAS,EAAUR,EAASY,WAAWC,QACvFb,EAASI,OAAOI,OAAS,EAAUR,EAASI,OAC5CJ,EAASc,SAASN,OAAS,GAChCR,EAASc,SAASP,SAAS,SACpBF,EAAQL,EAASc,SAAUZ,IAE/BL,IAIX,QAASkB,GAAUhB,EAAWC,EAAUC,EAAWe,GAG/C,IAFA,GAAIC,GAAOC,EAAQlB,EAAUgB,GACzBV,EAAQ,EACW,IAAhBW,EAAKT,QAAc,CACtB,GAAIF,EAAQL,EAAW,MAAOJ,IAC9B,IAAIoB,EAAKR,GAAGV,GAAY,MAAOkB,EAC/BA,GAAOC,EAAQD,EAAMD,GACrBV,IAEJ,MAAOT,KAcX,QAASqB,GAAQlB,EAAUgB,GACvB,GAAIhB,EAAS,IAAMgB,EAAW,GAAI,MAAOnB,IACzC,IAAIG,EAASiB,OAAOT,OAAS,GAAKR,EAASiB,OAAOL,WAAWJ,OAAS,EAAG,CAErE,IADA,GAAIW,GAAInB,EAASiB,OAAOL,WAAWQ,OAC5BD,EAAEP,WAAWJ,OAAS,GAAGW,EAAIA,EAAEP,WAAWQ,MACjD,OAAOD,GACJ,MAAInB,GAASiB,OAAOT,OAAS,EACzBR,EAASiB,OACTjB,EAASc,SAASN,OAAS,EAC3BR,EAASc,SAEbjB,IA3FXA,EAAEwB,GAAGvB,UAAY,SAAUwB,GAEvB,GAAIC,GAAUC,IAEd,OADIA,MAAKhB,OAAS,IAAGe,EAAUC,KAAKX,SAC7Bf,EAAUwB,EAAWA,EAAW,IAAKC,EAAS1B,EAAE,KAAKW,OAAQX,EAAE,KAAKuB,SAG/EvB,EAAEwB,GAAGN,UAAY,SAAUO,GAEvB,GAAIC,GAAUC,IAEd,OADIA,MAAKhB,OAAS,IAAGe,EAAUC,KAAKX,SAC7BE,EAAUO,EAAWA,EAAW,IAAKC,EAAS1B,EAAE,KAAKW,OAAQX,EAAE,KAAKgB,WAmFhFY","file":"jquery-next-in-dom.js","sourcesContent":["(function ($) {\n    $.fn.nextInDOM = function (selector) {\n        // NOTE: if multiple elements specified, only the first is considered\n        var element = this;\n        if (this.length > 1) element = this.first();\n        return nextInDOM(selector ? selector : '*', element, $('*').length, $('*').last());\n    };\n\n    $.fn.prevInDOM = function (selector) {\n        // NOTE: if multiple elements specified, only the first is considered\n        var element = this;\n        if (this.length > 1) element = this.first();\n        return prevInDOM(selector ? selector : '*', element, $('*').length, $('*').first());\n    };\n\n    // next in dom implementation\n    function nextInDOM(_selector, _subject, _maxNodes, _lastNode) {\n        var nid = $(),\n            next = getNext(_subject, _lastNode),\n            iters = 1;\n        $('html, body').addClass('cSeen');\n        while (next.length !== 0) {\n            if (iters > _maxNodes) return $();\n            if (next.is(_selector)) {\n                nid = next;\n                break;\n            }\n            next = getNext(next, _lastNode);\n            iters++;\n        }\n        $('.cSeen').removeClass('cSeen');\n        return nid;\n    }\n\n    /*\n        finding next (e) {\n        \tif e has children & !e.traversed\n        \t\tn = e.children.first\n        \telse if e has next\n        \t\tn = e.next\n        \telse if e has parent\n        \t\te.parent.traversed = true\n        \t\tn = next(e.parent)\n        \telse n = null;\n        }\n    */\n    function getNext(_subject, _lastNode) {\n        if (_subject[0] == _lastNode[0]) return $();\n        if (!(_subject.hasClass('cSeen')) && _subject.children().length > 0) return _subject.children().first();\n        else if (_subject.next().length > 0) return _subject.next();\n        else if (_subject.parent().length > 0) {\n            _subject.parent().addClass('cSeen');\n            return getNext(_subject.parent(), _lastNode);\n        }\n        return $();\n    }\n\n    // prev in dom implementation\n    function prevInDOM(_selector, _subject, _maxNodes, _firstNode) {\n        var prev = getPrev(_subject, _firstNode),\n            iters = 1;\n        while (prev.length !== 0) {\n            if (iters > _maxNodes) return $();\n            if (prev.is(_selector)) return prev;\n            prev = getPrev(prev, _firstNode);\n            iters++;\n        }\n        return $();\n    }\n\n    /*\n    if e has prev and e.prev has children {\n        n = deepest and farthest child of e.prev\n    }\n    else if e has prev {\n        n = e.prev\n    }\n    else if e has parent {\n\t    n = e.parent\n    }\n    */\n    function getPrev(_subject, _firstNode) {\n        if (_subject[0] == _firstNode[0]) return $();\n        if (_subject.prev().length > 0 && _subject.prev().children().length > 0) {\n            var p = _subject.prev().children().last();\n            while (p.children().length > 0) p = p.children().last();\n            return p;\n        } else if (_subject.prev().length > 0) {\n            return _subject.prev();\n        } else if (_subject.parent().length > 0) {\n            return _subject.parent();\n        }\n        return $();\n    }\n\n})(jQuery);"]}