{"version":3,"sources":["validator.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","Array","isArray","Object","TypeError","$","convertToNumber","numberString","replace","_numberString$split","split","_numberString$split2","integer","decimalpoint","parseInt","blur","$event","maxLength","this","data","min","max","aux","target","Number","isNaN","substr","toFixed","focus","_value$split","_value$split2","mantissa","auxvalue","select","_decimalPlaces","_aux$split","_aux$split2","fn","currencyFormatter","each","l","currency","$l","symbol","round","decicmal","thousands","val","attr","n","c","d","t","s","Math","abs","j","slice","change","parent","removeClass","find","html","required","prop","minLength","str","trim","addClass","jQuery"],"mappings":"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","file":"validator.js","sourcesContent":["\n+function ($) {\n  'use strict';\n  // Number ==================\n  $('.numberOnly').blur(function ($event) {\n    let maxLength = $(this).data('maxlength');\n    let min = $(this).data('min');\n    let max = $(this).data('max');\n    let aux = $event.target.value;\n\n    maxLength = Number(maxLength);\n\n    if (!isNaN(maxLength)) {\n      aux = aux.substr(0, maxLength);\n    }\n\n    let value = Number(aux);\n    if (isNaN(value)) value = 0;\n    if(!isNaN(Number(min))) value = value < min ? Number(min) : value;\n    if(!isNaN(Number(max))) value = value > max ? Number(max) : value;\n    \n    aux = value.toFixed(0);\n    $event.target.value = aux;\n  });\n  // Float ========================\n  $('.floatOnly').blur(function ($event) {\n    let maxLength = $(this).data('maxlength');\n    let min = $(this).data('min');\n    let max = $(this).data('max');\n    let aux = $event.target.value;\n\n    maxLength = Number(maxLength);\n\n    if (!isNaN(maxLength)) {\n      aux = aux.substr(0, maxLength);\n    }\n\n    let value = Number(aux);\n    if (isNaN(value)) value = 0;\n    if(!isNaN(Number(min))) value = value < min ? Number(min) : value;\n    if(!isNaN(Number(max))) value = value > max ? Number(max) : value;\n    \n    aux = value;\n    $event.target.value = aux;\n  });\n  // Percent ==================\n  $('.percentOnly').focus(function ($event) {\n    let value = $event.target.value;\n    value = value.replace(' %', '');\n    value = value.replace(/\\,/g, '');\n\n    const [integer, mantissa] = value.split('.');\n    let auxvalue\n    if (parseInt(mantissa) > 0) {\n      auxvalue = value;\n    } else {\n      auxvalue = integer;\n    }\n    $event.target.value = auxvalue;\n    $event.target.select();\n  });\n\n  $('.percentOnly').blur(function ($event) {\n    let maxLength = $(this).data('maxlength');\n    let min = $(this).data('min');\n    let max = $(this).data('max');\n    let _decimalPlaces = 2;\n    let aux = $event.target.value;\n    aux = aux.replace(',', '.');\n    aux = aux.replace('%', '');\n    maxLength = Number(maxLength);\n    if (!isNaN(maxLength)) {\n      let [integer, mantissa] = aux.split('.');\n      integer = integer.substr(0, maxLength);\n      aux = mantissa ? integer + '.' + mantissa : integer;\n    }\n    let value = Number(aux);\n    if (isNaN(value)) value = 0;\n    if(!isNaN(Number(min))) value = value < min ? Number(min) : value;\n    if(!isNaN(Number(max))) value = value > max ? Number(max) : value;\n\n    aux = value.toFixed(_decimalPlaces);\n    aux = aux.replace(',', '.');\n    aux = aux.replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,') + ' %';\n\n    $event.target.value = aux;\n  });\n  // Currency ==================\n\n  $.fn.currencyFormatter = function () {\n    this.each(function (i, l) {\n      var $l = $(l), currency;\n      switch ($l.data(\"currency\")) {\n        default: currency = {\n          symbol: \"$\",\n          round: 2,\n          decicmal: \".\",\n          thousands: \",\"\n        }\n          break;\n      }\n      $l.focus(function () {\n        if ($l.val() == $l.attr(\"title\")) {\n          $l.val(\"\");\n        } else {\n          let value = $l.val();\n          value = convertToNumber(value)\n          $l.val(value)\n        }\n      }).blur(function () {\n        if ($l.val() == \"$0.00\" || $l.val() === \"\") {\n          $l.val($l.attr(\"title\"));\n        } else {\n          let min = $(this).data('min');\n          let max = $(this).data('max');\n          var n = $l.val().replace(/[^0-9\\-\\.]/g, \"\");\n          n = Number(n);\n          if (isNaN(n)) n = 0;\n          if(!isNaN(Number(min))) n = n < min ? Number(min) : n;\n          if(!isNaN(Number(max))) n = n > max ? Number(max) : n;\n          var c = currency.round,\n            d = currency.decicmal,\n            t = currency.thousands,\n            s = n < 0 ? \"-\" : \"\",\n            q = n,\n            i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + \"\",\n            j = (j = i.length) > 3 ? j % 3 : 0;\n          $l.val(currency.symbol + s + (j ? i.substr(0, j) + t : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : \"\"));\n        }\n      }).change(function () {\n        let min = $(this).data('min');\n        let max = $(this).data('max');\n        var n = $l.val().replace(/[^0-9\\-\\.]/g, \"\");\n        n = Number(n);\n        if (isNaN(n)) n = 0;\n        if(!isNaN(Number(min))) n = n < min ? Number(min) : n;\n        if(!isNaN(Number(max))) n = n > max ? Number(max) : n;\n\n        var c = currency.round,\n          d = currency.decicmal,\n          t = currency.thousands,\n          s = n < 0 ? \"-\" : \"\",\n          q = n,\n          i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + \"\",\n          j = (j = i.length) > 3 ? j % 3 : 0;\n        $l.val(currency.symbol + s + (j ? i.substr(0, j) + t : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : \"\"));\n      });\n    });\n    return this;\n  }\n\n  // Validator ==================\n  $('input.validator, textarea.validator').focus(function ($event) {\n    $(this).parent().removeClass('has-error');\n    $(this).parent().find('span.help-block').html('');\n  })\n\n  $('input.validator, textarea.validator').blur(function ($event) {\n    let required = $(this).prop('required');\n    let minLength = $(this).data('minlength');\n    let maxLength = $(this).data('maxlength');\n    let str = $event.target.value.trim();\n\n    minLength = Number(minLength);\n    if (isNaN(minLength)) {\n      minLength = null;\n    }\n    maxLength = Number(maxLength);\n    if (isNaN(maxLength)) {\n      maxLength = null;\n    }\n\n    if (str == '' && required) {\n      $(this).parent().addClass('has-error');\n      $(this).parent().find('span.help-block').html('This field is required');\n    } else if (minLength && str.length < parseInt(minLength)) {\n      $(this).parent().addClass('has-error');\n      $(this).parent().find('span.help-block').html('This field must be least ' + minLength +' characters');\n    } else if (maxLength && str.length > parseInt(maxLength)) {\n      $(this).parent().addClass('has-error');\n      $(this).parent().find('span.help-block').html('This field must have at most ' + maxLength +' charaters');\n    } else {\n      $(this).parent().removeClass('has-error');\n      $(this).parent().find('span.help-block').html('');\n    }\n  })\n  function convertToNumber(numberString) {\n    numberString = numberString.replace(/\\,/g, '');\n    numberString = numberString.replace('$', '');\n    numberString = numberString.replace(' %', '');\n    const [integer, decimalpoint] = numberString.split('.');\n    if (parseInt(decimalpoint) > 0) {\n      return numberString;\n    } else {\n      return integer;\n    }\n  };\n\n}(jQuery);\n$(\"[data-currency]\").currencyFormatter();\n"]}