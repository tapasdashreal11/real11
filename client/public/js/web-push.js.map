{"version":3,"sources":["web-push.js"],"names":["$","initialiseState","register","ServiceWorkerRegistration","prototype","Notification","permission","console","log","window","val","pushManager","getSubscription","then","subscription","sendSubscriptionToServer","getPublicVapidKey","err","warn","urlBase64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","subscribe","vapidkey","userVisibleOnly","applicationServerKey","publicVapidKey","e","ajax","url","method","contentType","data","JSON","stringify","device_type","deviceData","dataType","res","navigator","serviceWorker"],"mappings":"AAAA,YAAAA,GAAE,WAaA,QAASC,GAAgBC,GACvB,MAAM,oBAAsBC,2BAA0BC,UAKtB,WAA5BC,aAAaC,eACbC,SAAQC,IAAI,uCAIV,eAAiBC,aAKpBT,EAAE,eAAeU,QAClBH,QAAQC,IAAI,eACZN,EAASS,YAAYC,kBACpBC,KAAK,SAASC,GACbP,QAAQC,IAAIM,GAELA,EAGHC,EAAyBD,GAFzBE,EAAkBd,KALxBA,SAWO,SAASe,GACZV,QAAQW,KAAK,iCAAkCD,WAlBjDV,SAAQC,IAAI,uCAVZD,SAAQC,IAAI,mCAiClB,QAASW,GAAsBC,GAS7B,IAAK,GARCC,GAAU,IAAIC,QAAQ,EAAIF,EAAaG,OAAS,GAAK,GACrDC,GAAUJ,EAAeC,GAC5BI,QAAQ,MAAO,KACfA,QAAQ,KAAM,KAEXC,EAAUjB,OAAOkB,KAAKH,GACtBI,EAAc,GAAIC,YAAWH,EAAQH,QAElCO,EAAI,EAAGA,EAAIJ,EAAQH,SAAUO,EACpCF,EAAYE,GAAKJ,EAAQK,WAAWD,EAEtC,OAAOF,GAGT,QAASI,GAAU9B,EAAU+B,GAC3B/B,EAASS,YAAYqB,WACnBE,iBAAiB,EACjBC,qBAAsBhB,EAAsBc,GAAYG,KACvDvB,KAAK,SAASC,GAGb,MAFAP,SAAQC,IAAI,aACZD,QAAQC,IAAIM,GACLC,EAAyBD,KANpCZ,SAQO,SAASmC,GACd9B,QAAQC,IAAI6B,KAIhB,QAAStB,GAAyBD,GAChCd,EAAEsC,MACAC,IAAM,kBACNC,OAAQ,OACRC,YAAa,kCACbC,KAAMC,KAAKC,WACTC,YAAc,cACdC,WAAchC,IAEhBiC,SAAU,SAId,QAAS/B,GAAkBd,GACzBF,EAAEsC,MACAC,IAAM,kCACNC,OAAQ,MACRC,YAAa,kCACbM,SAAU,SACTlC,KAAK,SAACmC,GACPzC,QAAQC,IAAI,qBACZD,QAAQC,IAAIwC,GACTA,EAAIZ,gBAAgBJ,EAAU9B,EAAU8C,EAAIZ,kBAlG/C,iBAAmBa,WACnBA,UAAUC,cAAchD,SAAS,yBAChCW,KAAMZ,GADPgD,SAEO,SAASZ,GACd9B,QAAQC,IAAI6B,KAId9B,QAAQC,IAAI,oDAEhB,IAAM4B,GAAiB","file":"web-push.js","sourcesContent":["$(function () {\n  if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('/js/service-worker.js')\n      .then((initialiseState))\n      .catch(function(e) {\n        console.log(e);\n      })\n  } else {\n      // alert('Service workers aren\\'t supported in this browser.');\n      console.log(\"Service workers aren't supported in this browser.\");\n  }\n  const publicVapidKey = 'BNSrScg_E1hM7rhwlD-CJJT-VzDMhy3f4Y29VUSyitR8L2usjlBJIJwne_Bu4NhiuC9nhYHQ4JHUXnRnOrTUk2A';\n\n  function initialiseState(register) {\n    if (!('showNotification' in ServiceWorkerRegistration.prototype)) {\n        console.log('Notifications aren\\'t supported.');\n        return;\n    }\n\n    if (Notification.permission === 'denied') {\n        console.log('The user has blocked notifications.');\n        return;\n    }\n\n    if (!('PushManager' in window)) {\n        console.log('Push messaging isn\\'t supported.');\n        return;\n    }\n\n    if($(\"#account-id\").val()) {\n      console.log(\"#account-id\");\n      register.pushManager.getSubscription()\n      .then(function(subscription) {\n        console.log(subscription);\n\n          if (!subscription) {\n            getPublicVapidKey(register);\n          } else {\n            sendSubscriptionToServer(subscription);\n          }\n\n      })\n      .catch(function(err) {\n          console.warn('Error during getSubscription()', err);\n      });\n    }\n  }\n\n  function urlBase64ToUint8Array(base64String) {\n    const padding = \"=\".repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n      .replace(/\\-/g, \"+\")\n      .replace(/_/g, \"/\");\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n\n  function subscribe(register, vapidkey) {\n    register.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(vapidkey || publicVapidKey)\n    }).then(function(subscription) {\n        console.log(\"subscribe\");\n        console.log(subscription);\n        return sendSubscriptionToServer(subscription);\n    })\n    .catch(function(e) {\n      console.log(e);\n    });\n  }\n\n  function sendSubscriptionToServer(subscription) {\n    $.ajax({\n      url : \"/registerDevice\",\n      method: 'POST',\n      contentType: \"application/json; charset=utf-8\",\n      data: JSON.stringify({\n        device_type : 'web-browser',\n        deviceData  : subscription\n      }),\n      dataType: 'json',\n    })\n  }\n\n  function getPublicVapidKey(register) {\n    $.ajax({\n      url : \"/notification/getVapidpublickey\",\n      method: 'GET',\n      contentType: \"application/json; charset=utf-8\",\n      dataType: 'json',\n    }).then((res) => {\n      console.log(\"getPublicVapidKey\");\n      console.log(res);\n      if(res.publicVapidKey) subscribe(register, res.publicVapidKey);\n    })\n  }\n})\n"]}