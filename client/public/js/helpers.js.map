{"version":3,"sources":["helpers.js"],"names":["$","window","localforage","Promise","extend","promisedAjax","requestParams","resolve","reject","url","ajax","type","data","contentType","dataType","success","response","error","Error","validateImage","imageData","maxFileSize","isValidFormat","RegExp","test","name","size","generateRandomString","strLength","chars","result","i","Math","round","random","length","isEmpty","str","trim","getCurrentLocation","options","settings","detectCurrentPosition","navigator","geolocation","getCurrentPosition","position","coordinates","lat","coords","latitude","lng","longitude","err","objectKeysToCamelCase","obj","formattedObj","key","formattedKey","strToCamelCase","replace","match","chr","toUpperCase","console","jQuery"],"mappings":"AAAA,cAAA,SAAUA,GAIFC,OAAOD,GAAKC,OAAOC,aAAeD,OAAOE,QAEzCH,EAAEI,QAKEC,aAAc,SAASC,GACnB,MAAO,IAAIH,SAAQ,SAASI,EAASC,GAC5BF,EAAcG,IAGfT,EAAEU,MAEEC,KAAML,EAAcK,MAAQ,MAC5BF,IAAKH,EAAcG,IACnBG,KAAMN,EAAcM,MAAQ,KAC5BC,YAAaP,EAAcO,aAAe,mDAC1CC,SAAUR,EAAcQ,SACxBC,QAAS,SAASC,GAAYT,EAAQS,IACtCC,MAAO,SAASA,GAAST,EAAOS,MAVpCT,EAAO,GAAIU,OAAM,mDAmB7BC,cAAgB,SAASC,GACrB,GAAMC,GAAc,SACdC,EAAgB,GAAIC,QAAO,0BACjC,OAAQD,GAAcE,KAAKJ,EAAUK,OAASL,EAAUM,KAAOL,GAMnEM,qBAAuB,SAASC,GAG5B,IAAK,GAFCC,GAAQ,iEACVC,EAAS,GACJC,EAAIH,EAAWG,EAAI,IAAKA,EAAGD,GAAUD,EAAMG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMM,OAAS,IAC/F,OAAOL,IAMXM,QAAS,SAASC,GACd,OAAQA,GAA4B,GAArBA,EAAIC,OAAOH,QAO9BI,mBAAoB,SAASC,GACzB,GAAMC,GAAWzC,EAAEI,UAAWoC,EAC9BC,GAASC,sBAAwB,WAC7B,MAAO,IAAIvC,SAAQ,SAACI,EAASC,GACpBmC,UAAUC,aACXpC,EAAO,GAAIU,OAAM,uDAErByB,UAAUC,YAAYC,mBAAmB,SAACC,GACtC,GAAMC,IACFC,IAAKF,EAASG,OAAOC,SACrBC,IAAKL,EAASG,OAAOG,UAEzB7C,GAAQwC,IACT,SAACM,GAAD,MAAS7C,GAAO6C,SAI/BC,sBAAwB,SAACC,GACrB,GAAIC,KACJ,KAAK,GAAIC,KAAOF,GAAK,CACjB,GAAIG,GAAe1D,EAAE2D,eAAeF,EACpCD,GAAaE,GAAgBH,EAAIE,GAErC,MAAOD,IAEXG,eAAiB,SAACtB,GACd,MAAOA,GAAIuB,QAAQ,YAAa,SAACC,EAAOC,GAAR,MAAgBA,GAAIC,mBAI5DC,QAAQ/C,MAAM,wEAEnBgD","file":"helpers.js","sourcesContent":["(function($) {\n    'use strict';\n    //Validate that required dependencies are available to load helpers\n    //functions \n    if (window.$ && window.localforage && window.Promise) {\n\n        $.extend({\n            /**\n            * Promised based Ajax request\n            * @param{Object} requestParams - Request parameters for request \n            */\n            promisedAjax: function(requestParams) {\n                return new Promise(function(resolve, reject) {\n                    if (!requestParams.url) {\n                        reject(new Error('Missing data or url parameters for request.'))\n                    } else {\n                        $.ajax({\n                            //Default request type is GET\n                            type: requestParams.type || 'GET',\n                            url: requestParams.url,\n                            data: requestParams.data || null,\n                            contentType: requestParams.contentType || 'application/x-www-form-urlencoded; charset=UTF-8',\n                            dataType: requestParams.dataType,\n                            success: function(response) { resolve(response); },\n                            error: function(error) { reject(error); }\n                        })\n                    } \n                })\n            },\n            /**\n             * Validate a image file size and format\n             * @params {Object} - key: {name, size}\n             */\n            validateImage : function(imageData) {\n                const maxFileSize = 52428800; // 50MByte in bytes\n                const isValidFormat = new RegExp(/\\.(jpe?g|png|gif|bmp)$/i);\n                return (isValidFormat.test(imageData.name) && imageData.size < maxFileSize);\n            },\n            /**\n             * Generate a random string with given length\n             * @param{Number} strLength\n             */\n            generateRandomString : function(strLength) {\n                const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n                let result = '';\n                for (let i = strLength; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];\n                return result;\n            },\n            /**\n             * Validate string input \n             * @param{String} str\n             */\n            isEmpty: function(str) {\n                return !str || str.trim().length == 0;\n            },\n\n            /**\n             * Get user current location address details\n             * @param {Object} options - Optionally pass lat and lng to get address\n             */\n            getCurrentLocation: function(options) {\n                const settings = $.extend({}, options);\n                settings.detectCurrentPosition = () => {\n                    return new Promise((resolve, reject) => {\n                        if (!navigator.geolocation) {\n                            reject(new Error('Geolocation detection not supported or is disabled'));\n                        }\n                        navigator.geolocation.getCurrentPosition((position) => {\n                            const coordinates = {\n                                lat: position.coords.latitude,\n                                lng: position.coords.longitude\n                            };\n                            resolve(coordinates);\n                        }, (err) => reject(err));\n                    })\n                };\n            },\n            objectKeysToCamelCase : (obj) => {\n                let formattedObj = {};\n                for (let key in obj) {\n                    let formattedKey = $.strToCamelCase(key);\n                    formattedObj[formattedKey] = obj[key];\n                }\n                return formattedObj;\n            },\n            strToCamelCase : (str) => {\n                return str.replace(/['_'](.)/g, (match, chr) => chr.toUpperCase());\n            }\n        });\n    } else {\n        console.error('Unable to load helpers functions, missing some required dependecies');\n    }\n})(jQuery)\n"]}