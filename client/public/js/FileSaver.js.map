{"version":3,"sources":["FileSaver.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","global","factory","define","amd","exports","mod","FileSaver","document","bom","blob","opts","autoBom","console","warn","test","type","Blob","String","fromCharCode","download","url","name","xhr","XMLHttpRequest","open","responseType","onload","saveAs","response","onerror","error","send","corsEnabled","status","click","node","dispatchEvent","MouseEvent","e","evt","createEvent","initMouseEvent","window","_global","self","HTMLAnchorElement","URL","webkitURL","a","createElement","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","navigator","msSaveOrOpenBlob","popup","title","body","innerText","force","isSafari","HTMLElement","safari","isChromeIOS","userAgent","FileReader","reader","onloadend","result","replace","readAsDataURL","module"],"mappings":"AAAA,YAEA,IAAIA,SAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,eAAkBF,KAFtQ,SAAWG,EAAQC,GACjB,GAAsB,kBAAXC,SAAyBA,OAAOC,IACzCD,UAAWD,OACN,IAAuB,mBAAZG,SAChBH,QACK,CACL,GAAII,IACFD,WAEFH,KACAD,EAAOM,UAAYD,EAAID,UAExBG,SAAU,WAgBX,QAASC,GAAIC,EAAMC,GAWjB,MAVoB,mBAATA,GAAsBA,GAC/BC,SAAS,GACgB,YAAhB,mBAAOD,GAAP,YAAAhB,QAAOgB,MAChBE,QAAQC,KAAK,sDACbH,GACEC,SAAUD,IAKVA,EAAKC,SAAW,6EAA6EG,KAAKL,EAAKM,MAClG,GAAIC,OAAMC,OAAOC,aAAa,OAAST,IAC5CM,KAAMN,EAAKM,OAIRN,EAGT,QAASU,GAASC,EAAKC,EAAMX,GAC3B,GAAIY,GAAM,GAAIC,eACdD,GAAIE,KAAK,MAAOJ,GAChBE,EAAIG,aAAe,OAEnBH,EAAII,OAAS,WACXC,EAAOL,EAAIM,SAAUP,EAAMX,IAG7BY,EAAIO,QAAU,WACZjB,QAAQkB,MAAM,4BAGhBR,EAAIS,OAGN,QAASC,GAAYZ,GACnB,GAAIE,GAAM,GAAIC,eAId,OAFAD,GAAIE,KAAK,OAAQJ,GAAK,GACtBE,EAAIS,OACGT,EAAIW,QAAU,KAAOX,EAAIW,QAAU,IAI5C,QAASC,GAAMC,GACb,IACEA,EAAKC,cAAc,GAAIC,YAAW,UAClC,MAAOC,GACP,GAAIC,GAAMhC,SAASiC,YAAY,cAC/BD,GAAIE,eAAe,SAAS,GAAM,EAAMC,OAAQ,EAAG,EAAG,EAAG,GAAI,IAAI,GAAO,GAAO,GAAO,EAAO,EAAG,MAChGP,EAAKC,cAAcG,IArDvB,GAAII,GAA4B,YAAlB,mBAAOD,QAAP,YAAAhD,QAAOgD,UAAuBA,OAAOA,SAAWA,OAASA,OAAyB,YAAhB,mBAAOE,MAAP,YAAAlD,QAAOkD,QAAqBA,KAAKA,OAASA,KAAOA,KAAyB,YAAlB,mBAAO5C,QAAP,YAAAN,QAAOM,UAAuBA,OAAOA,SAAWA,OAASA,OAAS,OAyDtM2B,EAASgB,EAAQhB,SACH,YAAlB,mBAAOe,QAAP,YAAAhD,QAAOgD,UAAuBA,SAAWC,EAAU,aAGjD,YAAcE,mBAAkB9C,UAAY,SAAgBU,EAAMY,EAAMX,GACxE,GAAIoC,GAAMH,EAAQG,KAAOH,EAAQI,UAC7BC,EAAIzC,SAAS0C,cAAc,IAC/B5B,GAAOA,GAAQZ,EAAKY,MAAQ,WAC5B2B,EAAE7B,SAAWE,EACb2B,EAAEE,IAAM,WAIY,gBAATzC,IAETuC,EAAEG,KAAO1C,EAELuC,EAAEI,SAAWC,SAASD,OACxBpB,EAAYgB,EAAEG,MAAQhC,EAASV,EAAMY,EAAMX,GAAQwB,EAAMc,EAAGA,EAAEM,OAAS,UAEvEpB,EAAMc,KAIRA,EAAEG,KAAOL,EAAIS,gBAAgB9C,GAC7B+C,WAAW,WACTV,EAAIW,gBAAgBT,EAAEG,OACrB,KAEHK,WAAW,WACTtB,EAAMc,IACL,KAGL,oBAAsBU,WAAY,SAAgBjD,EAAMY,EAAMX,GAG9D,GAFAW,EAAOA,GAAQZ,EAAKY,MAAQ,WAER,gBAATZ,GACT,GAAIuB,EAAYvB,GACdU,EAASV,EAAMY,EAAMX,OAChB,CACL,GAAIsC,GAAIzC,SAAS0C,cAAc,IAC/BD,GAAEG,KAAO1C,EACTuC,EAAEM,OAAS,SACXE,WAAW,WACTtB,EAAMc,SAIVU,WAAUC,iBAAiBnD,EAAIC,EAAMC,GAAOW,IAG9C,SAAgBZ,EAAMY,EAAMX,EAAMkD,GASlC,GANAA,EAAQA,GAASpC,KAAK,GAAI,UAEtBoC,IACFA,EAAMrD,SAASsD,MAAQD,EAAMrD,SAASuD,KAAKC,UAAY,kBAGrC,gBAATtD,GAAmB,MAAOU,GAASV,EAAMY,EAAMX,EAC1D,IAAIsD,GAAsB,6BAAdvD,EAAKM,KAEbkD,EAAW,eAAenD,KAAK6B,EAAQuB,cAAgBvB,EAAQwB,OAE/DC,EAAc,eAAetD,KAAK4C,UAAUW,UAEhD,KAAKD,GAAeJ,GAASC,IAAmC,YAAtB,mBAAOK,YAAP,YAAA5E,QAAO4E,aAAyB,CAExE,GAAIC,GAAS,GAAID,WAEjBC,GAAOC,UAAY,WACjB,GAAIpD,GAAMmD,EAAOE,MACjBrD,GAAMgD,EAAchD,EAAMA,EAAIsD,QAAQ,eAAgB,yBAClDd,EAAOA,EAAMP,SAASF,KAAO/B,EAASiC,SAAWjC,EACrDwC,EAAQ,MAGVW,EAAOI,cAAclE,OAChB,CACL,GAAIqC,GAAMH,EAAQG,KAAOH,EAAQI,UAC7B3B,EAAM0B,EAAIS,gBAAgB9C,EAC1BmD,GAAOA,EAAMP,SAAWjC,EAASiC,SAASF,KAAO/B,EACrDwC,EAAQ,KAERJ,WAAW,WACTV,EAAIW,gBAAgBrC,IACnB,OAGPuB,GAAQhB,OAASA,EAAOA,OAASA,EAEX,mBAAXiD,UACTA,OAAOxE,QAAUuB","file":"FileSaver.js","sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory();\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory();\n    global.FileSaver = mod.exports;\n  }\n})(document, function () {\n  \"use strict\";\n\n  /*\n  * FileSaver.js\n  * A saveAs() FileSaver implementation.\n  *\n  * By Eli Grey, http://eligrey.com\n  *\n  * License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n  * source  : http://purl.eligrey.com/github/FileSaver.js\n  */\n  // The one and only way of getting global scope in all environments\n  // https://stackoverflow.com/q/3277182/1008999\n  var _global = typeof window === 'object' && window.window === window ? window : typeof self === 'object' && self.self === self ? self : typeof global === 'object' && global.global === global ? global : void 0;\n\n  function bom(blob, opts) {\n    if (typeof opts === 'undefined') opts = {\n      autoBom: false\n    };else if (typeof opts !== 'object') {\n      console.warn('Depricated: Expected third argument to be a object');\n      opts = {\n        autoBom: !opts\n      };\n    } // prepend BOM for UTF-8 XML and text/* types (including HTML)\n    // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n\n    if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n      return new Blob([String.fromCharCode(0xFEFF), blob], {\n        type: blob.type\n      });\n    }\n\n    return blob;\n  }\n\n  function download(url, name, opts) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.responseType = 'blob';\n\n    xhr.onload = function () {\n      saveAs(xhr.response, name, opts);\n    };\n\n    xhr.onerror = function () {\n      console.error('could not download file');\n    };\n\n    xhr.send();\n  }\n\n  function corsEnabled(url) {\n    var xhr = new XMLHttpRequest(); // use sync to avoid popup blocker\n\n    xhr.open('HEAD', url, false);\n    xhr.send();\n    return xhr.status >= 200 && xhr.status <= 299;\n  } // `a.click()` doesn't work for all browsers (#465)\n\n\n  function click(node) {\n    try {\n      node.dispatchEvent(new MouseEvent('click'));\n    } catch (e) {\n      var evt = document.createEvent('MouseEvents');\n      evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\n      node.dispatchEvent(evt);\n    }\n  }\n\n  var saveAs = _global.saveAs || ( // probably in some web worker\n  typeof window !== 'object' || window !== _global ? function saveAs() {}\n  /* noop */\n  // Use download attribute first if possible (#193 Lumia mobile)\n  : 'download' in HTMLAnchorElement.prototype ? function saveAs(blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL;\n    var a = document.createElement('a');\n    name = name || blob.name || 'download';\n    a.download = name;\n    a.rel = 'noopener'; // tabnabbing\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob;\n\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href) ? download(blob, name, opts) : click(a, a.target = '_blank');\n      } else {\n        click(a);\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob);\n      setTimeout(function () {\n        URL.revokeObjectURL(a.href);\n      }, 4E4); // 40s\n\n      setTimeout(function () {\n        click(a);\n      }, 0);\n    }\n  } // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator ? function saveAs(blob, name, opts) {\n    name = name || blob.name || 'download';\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts);\n      } else {\n        var a = document.createElement('a');\n        a.href = blob;\n        a.target = '_blank';\n        setTimeout(function () {\n          click(a);\n        });\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name);\n    }\n  } // Fallback to using FileReader and a popup\n  : function saveAs(blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only avalible on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank');\n\n    if (popup) {\n      popup.document.title = popup.document.body.innerText = 'downloading...';\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts);\n    var force = blob.type === 'application/octet-stream';\n\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari;\n\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\n\n    if ((isChromeIOS || force && isSafari) && typeof FileReader === 'object') {\n      // Safari doesn't allow downloading of blob urls\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        var url = reader.result;\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;');\n        if (popup) popup.location.href = url;else location = url;\n        popup = null; // reverse-tabnabbing #460\n      };\n\n      reader.readAsDataURL(blob);\n    } else {\n      var URL = _global.URL || _global.webkitURL;\n      var url = URL.createObjectURL(blob);\n      if (popup) popup.location = url;else location.href = url;\n      popup = null; // reverse-tabnabbing #460\n\n      setTimeout(function () {\n        URL.revokeObjectURL(url);\n      }, 4E4); // 40s\n    }\n  });\n  _global.saveAs = saveAs.saveAs = saveAs;\n\n  if (typeof module !== 'undefined') {\n    module.exports = saveAs;\n  }\n});\n"]}