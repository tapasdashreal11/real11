{"version":3,"sources":["jquery-ui-timepicker-addon.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","factory","define","amd","jQuery","$","ui","timepicker","version","extend","Timepicker","this","regional","currentText","closeText","amNames","pmNames","timeFormat","timeSuffix","timeOnlyTitle","timeText","hourText","minuteText","secondText","millisecText","microsecText","timezoneText","isRTL","_defaults","showButtonPanel","timeOnly","timeOnlyShowDate","showHour","showMinute","showSecond","showMillisec","showMicrosec","showTimezone","showTime","stepHour","stepMinute","stepSecond","stepMillisec","stepMicrosec","hour","minute","second","millisec","microsec","timezone","hourMin","minuteMin","secondMin","millisecMin","microsecMin","hourMax","minuteMax","secondMax","millisecMax","microsecMax","minDateTime","maxDateTime","maxTime","minTime","onSelect","hourGrid","minuteGrid","secondGrid","millisecGrid","microsecGrid","alwaysSetTime","separator","altFieldTimeOnly","altTimeFormat","altSeparator","altTimeSuffix","altRedirectFocus","pickerTimeFormat","pickerTimeSuffix","showTimepicker","timezoneList","addSliderAccess","sliderAccessArgs","controlType","oneLine","defaultValue","parse","afterInject","$input","$altInput","$timeObj","inst","hour_slider","minute_slider","second_slider","millisec_slider","microsec_slider","timezone_select","hourMinOriginal","minuteMinOriginal","secondMinOriginal","millisecMinOriginal","microsecMinOriginal","hourMaxOriginal","minuteMaxOriginal","secondMaxOriginal","millisecMaxOriginal","microsecMaxOriginal","ampm","formattedDate","formattedTime","formattedDateTime","units","support","control","setDefaults","settings","extendRemove","_newInst","opts","tp_inst","inlineSettings","fns","overrides","i","attrName","hasOwnProperty","attrValue","attr","eval","err","beforeShow","input","dp_inst","isFunction","evnts","call","onChangeMonthYear","year","month","onClose","dateText","timeDefined","val","_updateDateTime","map","toUpperCase","detectSupport","slider","_controls","tzl","length","tzi","tzv","value","label","timezoneOffsetString","iso8601","timezoneOffsetNumber","Date","getTimezoneOffset","altField","css","cursor","focus","trigger","minDate","maxDate","undefined","getTime","bind","_onFocus","_addTimePicker","currDT","trim","_parseTime","_limitMinMaxDateTime","_injectTimePicker","_afterInject","timeString","withDate","datepicker","_getInst","dp_dateFormat","_get","parseRes","parseDateTimeInternal","_getFormatConfig","timeObj","log","parseTime","o","$dp","dpDiv","litem","uitem","show","max","gridSize","size","l","find","noDisplay","html","timeInput","substr","parseInt","h","tmph","formatTime","m","showTz","$tp","prepend","hide","create","width","marginLeft","marginRight","borderCollapse","click","e","$t","n","replace","ap","f","data","indexOf","_onTimeChange","_onSelectHandler","textAlign","overflow","append","fn","apply","idx","text","local_timezone","selectedYear","selectedMonth","selectedDay","selectLocalTimezone","change","$buttonPanel","before","parsedTime","update","setHours","setMinutes","setSeconds","_setTime","blur","rtl","setTimeout","sliderAccess","sliderAccessWidth","outerWidth","each","$g","oldWidth","oldMarginLeft","toString","newWidth","newMarginLeft","adjustSliders","dp_date","minDateTimeDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getMicroseconds","maxDateTimeDate","tempMinTime","tempMaxTime","minMax","secMax","options","min","step","hasChanged","inArray","sPos","selectionStart","ePos","selectionEnd","setSelectionRange","inputEl","dtTmp","currentYear","currentMonth","currentDay","dt","_daylightSavingAdjust","dateFmt","formatCfg","timeAvailable","formatDate","lastVal","altFormattedDateTime","altFormat","get","_updateDatepicker","unit","prop","orientation","slide","event","stop","Math","abs","select","sel","format","children","remove","appendTo","tmp_args","Array","slice","arguments","datetimepicker","parseDateTime","dateFormat","dateTimeString","dateSettings","timeSettings","t","date","setMicroseconds","strictParse","s","treg","getPatternAmpm","markers","merge","join","getFormatPositions","finds","toLowerCase","match","orders","c","z","charAt","regstr","ml","order","RegExp","resTime","x","Number","looseParse","d","isNaN","err2","time","tmptime","ampmName","convert24to12","_base_selectDate","_selectDate","id","dateStr","was_inline","inline","stay_open","_notifyChange","_base_updateDatepicker","_curInst","_datepickerShowing","_lastInput","_base_doKeyPress","_doKeyPress","target","tz","dateChars","_possibleChars","datetimeChars","chr","String","fromCharCode","charCode","keyCode","ctrlKey","_base_updateAlternate","_updateAlternate","_getDate","_base_doKeyUp","_doKeyUp","_base_gotoToday","_gotoToday","tzoffset","now","_setDate","_disableTimepickerDatepicker","_enableTimepickerDatepicker","defaults","_setTimeDatepicker","_setDateFromField","tp_date","_base_setDateDatepicker","_setDateDatepicker","_date","timezoneAdjust","_base_getDateDatepicker","_getDateDatepicker","noDefault","_base_parseDate","parseDate","substring","_base_formatDate","_formatDate","day","_base_optionDatepicker","_optionDatepicker","name","name_clone","ret","oldVal","$target","onselect","isEmptyObject","props","tf","isIn","computeEffectiveSetting","property","splitDateTime","timeParts","split","timePartsLen","allParts","allPartsLen","dateString","splice","parts","tzMinutes","off","minutes","hours","iso","tzString","normalized","test","toTimezone","toTz","timeRange","startTime","endTime","handleRange","datetimeRange","dateRange","method","checkDates","changed","other","startdt","enddt","changeddt","setMilliseconds","minInterval","maxInterval","selected","option","start","end","selectedDateTime","window","console","_util","_extendRemove","_isEmptyObject","_convert24to12","_detectSupport","_selectLocalTimezone","_computeEffectiveSetting","_splitDateTime","_parseDateTimeInternal","microseconds","floor"],"mappings":"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","file":"jquery-ui-timepicker-addon.js","sourcesContent":["/*! jQuery Timepicker Addon - v1.6.1 - 2015-11-14\n * http://trentrichardson.com/examples/timepicker\n * Copyright (c) 2015 Trent Richardson; Licensed MIT */\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery', 'jquery-ui'], factory);\n    } else {\n        factory(jQuery);\n    }\n}(function($) {\n\n    /*\n     * Lets not redefine timepicker, Prevent \"Uncaught RangeError: Maximum call stack size exceeded\"\n     */\n    $.ui.timepicker = $.ui.timepicker || {};\n    if ($.ui.timepicker.version) {\n        return;\n    }\n\n    /*\n     * Extend jQueryUI, get it started with our version number\n     */\n    $.extend($.ui, {\n        timepicker: {\n            version: \"1.6.1\"\n        }\n    });\n\n    /* \n     * Timepicker manager.\n     * Use the singleton instance of this class, $.timepicker, to interact with the time picker.\n     * Settings for (groups of) time pickers are maintained in an instance object,\n     * allowing multiple different settings on the same page.\n     */\n    var Timepicker = function() {\n        this.regional = []; // Available regional settings, indexed by language code\n        this.regional[''] = { // Default regional settings\n            currentText: 'Now',\n            closeText: 'Done',\n            amNames: ['AM', 'A'],\n            pmNames: ['PM', 'P'],\n            timeFormat: 'HH:mm',\n            timeSuffix: '',\n            timeOnlyTitle: 'Choose Time',\n            timeText: 'Time',\n            hourText: 'Hour',\n            minuteText: 'Minute',\n            secondText: 'Second',\n            millisecText: 'Millisecond',\n            microsecText: 'Microsecond',\n            timezoneText: 'Time Zone',\n            isRTL: false\n        };\n        this._defaults = { // Global defaults for all the datetime picker instances\n            showButtonPanel: true,\n            timeOnly: false,\n            timeOnlyShowDate: false,\n            showHour: null,\n            showMinute: null,\n            showSecond: null,\n            showMillisec: null,\n            showMicrosec: null,\n            showTimezone: null,\n            showTime: true,\n            stepHour: 1,\n            stepMinute: 1,\n            stepSecond: 1,\n            stepMillisec: 1,\n            stepMicrosec: 1,\n            hour: 0,\n            minute: 0,\n            second: 0,\n            millisec: 0,\n            microsec: 0,\n            timezone: null,\n            hourMin: 0,\n            minuteMin: 0,\n            secondMin: 0,\n            millisecMin: 0,\n            microsecMin: 0,\n            hourMax: 23,\n            minuteMax: 59,\n            secondMax: 59,\n            millisecMax: 999,\n            microsecMax: 999,\n            minDateTime: null,\n            maxDateTime: null,\n            maxTime: null,\n            minTime: null,\n            onSelect: null,\n            hourGrid: 0,\n            minuteGrid: 0,\n            secondGrid: 0,\n            millisecGrid: 0,\n            microsecGrid: 0,\n            alwaysSetTime: true,\n            separator: ' ',\n            altFieldTimeOnly: true,\n            altTimeFormat: null,\n            altSeparator: null,\n            altTimeSuffix: null,\n            altRedirectFocus: true,\n            pickerTimeFormat: null,\n            pickerTimeSuffix: null,\n            showTimepicker: true,\n            timezoneList: null,\n            addSliderAccess: false,\n            sliderAccessArgs: null,\n            controlType: 'slider',\n            oneLine: false,\n            defaultValue: null,\n            parse: 'strict',\n            afterInject: null\n        };\n        $.extend(this._defaults, this.regional['']);\n    };\n\n    $.extend(Timepicker.prototype, {\n        $input: null,\n        $altInput: null,\n        $timeObj: null,\n        inst: null,\n        hour_slider: null,\n        minute_slider: null,\n        second_slider: null,\n        millisec_slider: null,\n        microsec_slider: null,\n        timezone_select: null,\n        maxTime: null,\n        minTime: null,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisec: 0,\n        microsec: 0,\n        timezone: null,\n        hourMinOriginal: null,\n        minuteMinOriginal: null,\n        secondMinOriginal: null,\n        millisecMinOriginal: null,\n        microsecMinOriginal: null,\n        hourMaxOriginal: null,\n        minuteMaxOriginal: null,\n        secondMaxOriginal: null,\n        millisecMaxOriginal: null,\n        microsecMaxOriginal: null,\n        ampm: '',\n        formattedDate: '',\n        formattedTime: '',\n        formattedDateTime: '',\n        timezoneList: null,\n        units: ['hour', 'minute', 'second', 'millisec', 'microsec'],\n        support: {},\n        control: null,\n\n        /* \n         * Override the default settings for all instances of the time picker.\n         * @param  {Object} settings  object - the new settings to use as defaults (anonymous object)\n         * @return {Object} the manager object\n         */\n        setDefaults: function(settings) {\n            extendRemove(this._defaults, settings || {});\n            return this;\n        },\n\n        /*\n         * Create a new Timepicker instance\n         */\n        _newInst: function($input, opts) {\n            var tp_inst = new Timepicker(),\n                inlineSettings = {},\n                fns = {},\n                overrides, i;\n\n            for (var attrName in this._defaults) {\n                if (this._defaults.hasOwnProperty(attrName)) {\n                    var attrValue = $input.attr('time:' + attrName);\n                    if (attrValue) {\n                        try {\n                            inlineSettings[attrName] = eval(attrValue);\n                        } catch (err) {\n                            inlineSettings[attrName] = attrValue;\n                        }\n                    }\n                }\n            }\n\n            overrides = {\n                beforeShow: function(input, dp_inst) {\n                    if ($.isFunction(tp_inst._defaults.evnts.beforeShow)) {\n                        return tp_inst._defaults.evnts.beforeShow.call($input[0], input, dp_inst, tp_inst);\n                    }\n                },\n                onChangeMonthYear: function(year, month, dp_inst) {\n                    // Update the time as well : this prevents the time from disappearing from the $input field.\n                    // tp_inst._updateDateTime(dp_inst);\n                    if ($.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)) {\n                        tp_inst._defaults.evnts.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst);\n                    }\n                },\n                onClose: function(dateText, dp_inst) {\n                    if (tp_inst.timeDefined === true && $input.val() !== '') {\n                        tp_inst._updateDateTime(dp_inst);\n                    }\n                    if ($.isFunction(tp_inst._defaults.evnts.onClose)) {\n                        tp_inst._defaults.evnts.onClose.call($input[0], dateText, dp_inst, tp_inst);\n                    }\n                }\n            };\n            for (i in overrides) {\n                if (overrides.hasOwnProperty(i)) {\n                    fns[i] = opts[i] || this._defaults[i] || null;\n                }\n            }\n\n            tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, opts, overrides, {\n                evnts: fns,\n                timepicker: tp_inst // add timepicker as a property of datepicker: $.datepicker._get(dp_inst, 'timepicker');\n            });\n            tp_inst.amNames = $.map(tp_inst._defaults.amNames, function(val) {\n                return val.toUpperCase();\n            });\n            tp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function(val) {\n                return val.toUpperCase();\n            });\n\n            // detect which units are supported\n            tp_inst.support = detectSupport(\n                tp_inst._defaults.timeFormat +\n                (tp_inst._defaults.pickerTimeFormat ? tp_inst._defaults.pickerTimeFormat : '') +\n                (tp_inst._defaults.altTimeFormat ? tp_inst._defaults.altTimeFormat : ''));\n\n            // controlType is string - key to our this._controls\n            if (typeof(tp_inst._defaults.controlType) === 'string') {\n                if (tp_inst._defaults.controlType === 'slider' && typeof($.ui.slider) === 'undefined') {\n                    tp_inst._defaults.controlType = 'select';\n                }\n                tp_inst.control = tp_inst._controls[tp_inst._defaults.controlType];\n            }\n            // controlType is an object and must implement create, options, value methods\n            else {\n                tp_inst.control = tp_inst._defaults.controlType;\n            }\n\n            // prep the timezone options\n            var timezoneList = [-720, -660, -600, -570, -540, -480, -420, -360, -300, -270, -240, -210, -180, -120, -60,\n                0, 60, 120, 180, 210, 240, 270, 300, 330, 345, 360, 390, 420, 480, 525, 540, 570, 600, 630, 660, 690, 720, 765, 780, 840\n            ];\n            if (tp_inst._defaults.timezoneList !== null) {\n                timezoneList = tp_inst._defaults.timezoneList;\n            }\n            var tzl = timezoneList.length,\n                tzi = 0,\n                tzv = null;\n            if (tzl > 0 && typeof timezoneList[0] !== 'object') {\n                for (; tzi < tzl; tzi++) {\n                    tzv = timezoneList[tzi];\n                    timezoneList[tzi] = {\n                        value: tzv,\n                        label: $.timepicker.timezoneOffsetString(tzv, tp_inst.support.iso8601)\n                    };\n                }\n            }\n            tp_inst._defaults.timezoneList = timezoneList;\n\n            // set the default units\n            tp_inst.timezone = tp_inst._defaults.timezone !== null ? $.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone) :\n                ((new Date()).getTimezoneOffset() * -1);\n            tp_inst.hour = tp_inst._defaults.hour < tp_inst._defaults.hourMin ? tp_inst._defaults.hourMin :\n                tp_inst._defaults.hour > tp_inst._defaults.hourMax ? tp_inst._defaults.hourMax : tp_inst._defaults.hour;\n            tp_inst.minute = tp_inst._defaults.minute < tp_inst._defaults.minuteMin ? tp_inst._defaults.minuteMin :\n                tp_inst._defaults.minute > tp_inst._defaults.minuteMax ? tp_inst._defaults.minuteMax : tp_inst._defaults.minute;\n            tp_inst.second = tp_inst._defaults.second < tp_inst._defaults.secondMin ? tp_inst._defaults.secondMin :\n                tp_inst._defaults.second > tp_inst._defaults.secondMax ? tp_inst._defaults.secondMax : tp_inst._defaults.second;\n            tp_inst.millisec = tp_inst._defaults.millisec < tp_inst._defaults.millisecMin ? tp_inst._defaults.millisecMin :\n                tp_inst._defaults.millisec > tp_inst._defaults.millisecMax ? tp_inst._defaults.millisecMax : tp_inst._defaults.millisec;\n            tp_inst.microsec = tp_inst._defaults.microsec < tp_inst._defaults.microsecMin ? tp_inst._defaults.microsecMin :\n                tp_inst._defaults.microsec > tp_inst._defaults.microsecMax ? tp_inst._defaults.microsecMax : tp_inst._defaults.microsec;\n            tp_inst.ampm = '';\n            tp_inst.$input = $input;\n\n            if (tp_inst._defaults.altField) {\n                tp_inst.$altInput = $(tp_inst._defaults.altField);\n                if (tp_inst._defaults.altRedirectFocus === true) {\n                    tp_inst.$altInput.css({\n                        cursor: 'pointer'\n                    }).focus(function() {\n                        $input.trigger(\"focus\");\n                    });\n                }\n            }\n\n            if (tp_inst._defaults.minDate === 0 || tp_inst._defaults.minDateTime === 0) {\n                tp_inst._defaults.minDate = new Date();\n            }\n            if (tp_inst._defaults.maxDate === 0 || tp_inst._defaults.maxDateTime === 0) {\n                tp_inst._defaults.maxDate = new Date();\n            }\n\n            // datepicker needs minDate/maxDate, timepicker needs minDateTime/maxDateTime..\n            if (tp_inst._defaults.minDate !== undefined && tp_inst._defaults.minDate instanceof Date) {\n                tp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime());\n            }\n            if (tp_inst._defaults.minDateTime !== undefined && tp_inst._defaults.minDateTime instanceof Date) {\n                tp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime());\n            }\n            if (tp_inst._defaults.maxDate !== undefined && tp_inst._defaults.maxDate instanceof Date) {\n                tp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime());\n            }\n            if (tp_inst._defaults.maxDateTime !== undefined && tp_inst._defaults.maxDateTime instanceof Date) {\n                tp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime());\n            }\n            tp_inst.$input.bind('focus', function() {\n                tp_inst._onFocus();\n            });\n\n            return tp_inst;\n        },\n\n        /*\n         * add our sliders to the calendar\n         */\n        _addTimePicker: function(dp_inst) {\n            var currDT = $.trim((this.$altInput && this._defaults.altFieldTimeOnly) ? this.$input.val() + ' ' + this.$altInput.val() : this.$input.val());\n\n            this.timeDefined = this._parseTime(currDT);\n            this._limitMinMaxDateTime(dp_inst, false);\n            this._injectTimePicker();\n            this._afterInject();\n        },\n\n        /*\n         * parse the time string from input value or _setTime\n         */\n        _parseTime: function(timeString, withDate) {\n            if (!this.inst) {\n                this.inst = $.datepicker._getInst(this.$input[0]);\n            }\n\n            if (withDate || !this._defaults.timeOnly) {\n                var dp_dateFormat = $.datepicker._get(this.inst, 'dateFormat');\n                try {\n                    var parseRes = parseDateTimeInternal(dp_dateFormat, this._defaults.timeFormat, timeString, $.datepicker._getFormatConfig(this.inst), this._defaults);\n                    if (!parseRes.timeObj) {\n                        return false;\n                    }\n                    $.extend(this, parseRes.timeObj);\n                } catch (err) {\n                    $.timepicker.log(\"Error parsing the date/time string: \" + err +\n                        \"\\ndate/time string = \" + timeString +\n                        \"\\ntimeFormat = \" + this._defaults.timeFormat +\n                        \"\\ndateFormat = \" + dp_dateFormat);\n                    return false;\n                }\n                return true;\n            } else {\n                var timeObj = $.datepicker.parseTime(this._defaults.timeFormat, timeString, this._defaults);\n                if (!timeObj) {\n                    return false;\n                }\n                $.extend(this, timeObj);\n                return true;\n            }\n        },\n\n        /*\n         * Handle callback option after injecting timepicker\n         */\n        _afterInject: function() {\n            var o = this.inst.settings;\n            if ($.isFunction(o.afterInject)) {\n                o.afterInject.call(this);\n            }\n        },\n\n        /*\n         * generate and inject html for timepicker into ui datepicker\n         */\n        _injectTimePicker: function() {\n            var $dp = this.inst.dpDiv,\n                o = this.inst.settings,\n                tp_inst = this,\n                litem = '',\n                uitem = '',\n                show = null,\n                max = {},\n                gridSize = {},\n                size = null,\n                i = 0,\n                l = 0;\n\n            // Prevent displaying twice\n            if ($dp.find(\"div.ui-timepicker-div\").length === 0 && o.showTimepicker) {\n                var noDisplay = ' ui_tpicker_unit_hide',\n                    html = '<div class=\"ui-timepicker-div' + (o.isRTL ? ' ui-timepicker-rtl' : '') + (o.oneLine && o.controlType === 'select' ? ' ui-timepicker-oneLine' : '') + '\"><dl>' + '<dt class=\"ui_tpicker_time_label' + ((o.showTime) ? '' : noDisplay) + '\">' + o.timeText + '</dt>' +\n                    '<dd class=\"ui_tpicker_time ' + ((o.showTime) ? '' : noDisplay) + '\"><input class=\"ui_tpicker_time_input\" ' + (o.timeInput ? '' : 'disabled') + '/></dd>';\n\n                // Create the markup\n                for (i = 0, l = this.units.length; i < l; i++) {\n                    litem = this.units[i];\n                    uitem = litem.substr(0, 1).toUpperCase() + litem.substr(1);\n                    show = o['show' + uitem] !== null ? o['show' + uitem] : this.support[litem];\n\n                    // Added by Peter Medeiros:\n                    // - Figure out what the hour/minute/second max should be based on the step values.\n                    // - Example: if stepMinute is 15, then minMax is 45.\n                    max[litem] = parseInt((o[litem + 'Max'] - ((o[litem + 'Max'] - o[litem + 'Min']) % o['step' + uitem])), 10);\n                    gridSize[litem] = 0;\n\n                    html += '<dt class=\"ui_tpicker_' + litem + '_label' + (show ? '' : noDisplay) + '\">' + o[litem + 'Text'] + '</dt>' +\n                        '<dd class=\"ui_tpicker_' + litem + (show ? '' : noDisplay) + '\"><div class=\"ui_tpicker_' + litem + '_slider' + (show ? '' : noDisplay) + '\"></div>';\n\n                    if (show && o[litem + 'Grid'] > 0) {\n                        html += '<div style=\"padding-left: 1px\"><table class=\"ui-tpicker-grid-label\"><tr>';\n\n                        if (litem === 'hour') {\n                            for (var h = o[litem + 'Min']; h <= max[litem]; h += parseInt(o[litem + 'Grid'], 10)) {\n                                gridSize[litem]++;\n                                var tmph = $.datepicker.formatTime(this.support.ampm ? 'hht' : 'HH', {\n                                    hour: h\n                                }, o);\n                                html += '<td data-for=\"' + litem + '\">' + tmph + '</td>';\n                            }\n                        } else {\n                            for (var m = o[litem + 'Min']; m <= max[litem]; m += parseInt(o[litem + 'Grid'], 10)) {\n                                gridSize[litem]++;\n                                html += '<td data-for=\"' + litem + '\">' + ((m < 10) ? '0' : '') + m + '</td>';\n                            }\n                        }\n\n                        html += '</tr></table></div>';\n                    }\n                    html += '</dd>';\n                }\n\n                // Timezone\n                var showTz = o.showTimezone !== null ? o.showTimezone : this.support.timezone;\n                html += '<dt class=\"ui_tpicker_timezone_label' + (showTz ? '' : noDisplay) + '\">' + o.timezoneText + '</dt>';\n                html += '<dd class=\"ui_tpicker_timezone' + (showTz ? '' : noDisplay) + '\"></dd>';\n\n                // Create the elements from string\n                html += '</dl></div>';\n                var $tp = $(html);\n\n                // if we only want time picker...\n                if (o.timeOnly === true) {\n                    $tp.prepend('<div class=\"ui-widget-header ui-helper-clearfix ui-corner-all\">' + '<div class=\"ui-datepicker-title\">' + o.timeOnlyTitle + '</div>' + '</div>');\n                    $dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();\n                }\n\n                // add sliders, adjust grids, add events\n                for (i = 0, l = tp_inst.units.length; i < l; i++) {\n                    litem = tp_inst.units[i];\n                    uitem = litem.substr(0, 1).toUpperCase() + litem.substr(1);\n                    show = o['show' + uitem] !== null ? o['show' + uitem] : this.support[litem];\n\n                    // add the slider\n                    tp_inst[litem + '_slider'] = tp_inst.control.create(tp_inst, $tp.find('.ui_tpicker_' + litem + '_slider'), litem, tp_inst[litem], o[litem + 'Min'], max[litem], o['step' + uitem]);\n\n                    // adjust the grid and add click event\n                    if (show && o[litem + 'Grid'] > 0) {\n                        size = 100 * gridSize[litem] * o[litem + 'Grid'] / (max[litem] - o[litem + 'Min']);\n                        $tp.find('.ui_tpicker_' + litem + ' table').css({\n                            width: size + \"%\",\n                            marginLeft: o.isRTL ? '0' : ((size / (-2 * gridSize[litem])) + \"%\"),\n                            marginRight: o.isRTL ? ((size / (-2 * gridSize[litem])) + \"%\") : '0',\n                            borderCollapse: 'collapse'\n                        }).find(\"td\").click(function(e) {\n                            var $t = $(this),\n                                h = $t.html(),\n                                n = parseInt(h.replace(/[^0-9]/g), 10),\n                                ap = h.replace(/[^apm]/ig),\n                                f = $t.data('for'); // loses scope, so we use data-for\n\n                            if (f === 'hour') {\n                                if (ap.indexOf('p') !== -1 && n < 12) {\n                                    n += 12;\n                                } else {\n                                    if (ap.indexOf('a') !== -1 && n === 12) {\n                                        n = 0;\n                                    }\n                                }\n                            }\n\n                            tp_inst.control.value(tp_inst, tp_inst[f + '_slider'], litem, n);\n\n                            tp_inst._onTimeChange();\n                            tp_inst._onSelectHandler();\n                        }).css({\n                            cursor: 'pointer',\n                            width: (100 / gridSize[litem]) + '%',\n                            textAlign: 'center',\n                            overflow: 'hidden'\n                        });\n                    } // end if grid > 0\n                } // end for loop\n\n                // Add timezone options\n                this.timezone_select = $tp.find('.ui_tpicker_timezone').append('<select></select>').find(\"select\");\n                $.fn.append.apply(this.timezone_select,\n                    $.map(o.timezoneList, function(val, idx) {\n                        return $(\"<option />\").val(typeof val === \"object\" ? val.value : val).text(typeof val === \"object\" ? val.label : val);\n                    }));\n                if (typeof(this.timezone) !== \"undefined\" && this.timezone !== null && this.timezone !== \"\") {\n                    var local_timezone = (new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12)).getTimezoneOffset() * -1;\n                    if (local_timezone === this.timezone) {\n                        selectLocalTimezone(tp_inst);\n                    } else {\n                        this.timezone_select.val(this.timezone);\n                    }\n                } else {\n                    if (typeof(this.hour) !== \"undefined\" && this.hour !== null && this.hour !== \"\") {\n                        this.timezone_select.val(o.timezone);\n                    } else {\n                        selectLocalTimezone(tp_inst);\n                    }\n                }\n                this.timezone_select.change(function() {\n                    tp_inst._onTimeChange();\n                    tp_inst._onSelectHandler();\n                    tp_inst._afterInject();\n                });\n                // End timezone options\n\n                // inject timepicker into datepicker\n                var $buttonPanel = $dp.find('.ui-datepicker-buttonpane');\n                if ($buttonPanel.length) {\n                    $buttonPanel.before($tp);\n                } else {\n                    $dp.append($tp);\n                }\n\n                this.$timeObj = $tp.find('.ui_tpicker_time_input');\n                this.$timeObj.change(function() {\n                    var timeFormat = tp_inst.inst.settings.timeFormat;\n                    var parsedTime = $.datepicker.parseTime(timeFormat, this.value);\n                    var update = new Date();\n                    if (parsedTime) {\n                        update.setHours(parsedTime.hour);\n                        update.setMinutes(parsedTime.minute);\n                        update.setSeconds(parsedTime.second);\n                        $.datepicker._setTime(tp_inst.inst, update);\n                    } else {\n                        this.value = tp_inst.formattedTime;\n                        this.blur();\n                    }\n                });\n\n                if (this.inst !== null) {\n                    var timeDefined = this.timeDefined;\n                    this._onTimeChange();\n                    this.timeDefined = timeDefined;\n                }\n\n                // slideAccess integration: http://trentrichardson.com/2011/11/11/jquery-ui-sliders-and-touch-accessibility/\n                if (this._defaults.addSliderAccess) {\n                    var sliderAccessArgs = this._defaults.sliderAccessArgs,\n                        rtl = this._defaults.isRTL;\n                    sliderAccessArgs.isRTL = rtl;\n\n                    setTimeout(function() { // fix for inline mode\n                        if ($tp.find('.ui-slider-access').length === 0) {\n                            $tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);\n\n                            // fix any grids since sliders are shorter\n                            var sliderAccessWidth = $tp.find('.ui-slider-access:eq(0)').outerWidth(true);\n                            if (sliderAccessWidth) {\n                                $tp.find('table:visible').each(function() {\n                                    var $g = $(this),\n                                        oldWidth = $g.outerWidth(),\n                                        oldMarginLeft = $g.css(rtl ? 'marginRight' : 'marginLeft').toString().replace('%', ''),\n                                        newWidth = oldWidth - sliderAccessWidth,\n                                        newMarginLeft = ((oldMarginLeft * newWidth) / oldWidth) + '%',\n                                        css = {\n                                            width: newWidth,\n                                            marginRight: 0,\n                                            marginLeft: 0\n                                        };\n                                    css[rtl ? 'marginRight' : 'marginLeft'] = newMarginLeft;\n                                    $g.css(css);\n                                });\n                            }\n                        }\n                    }, 10);\n                }\n                // end slideAccess integration\n\n                tp_inst._limitMinMaxDateTime(this.inst, true);\n            }\n        },\n\n        /*\n         * This function tries to limit the ability to go outside the\n         * min/max date range\n         */\n        _limitMinMaxDateTime: function(dp_inst, adjustSliders) {\n            var o = this._defaults,\n                dp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);\n\n            if (!this._defaults.showTimepicker) {\n                return;\n            } // No time so nothing to check here\n\n            if ($.datepicker._get(dp_inst, 'minDateTime') !== null && $.datepicker._get(dp_inst, 'minDateTime') !== undefined && dp_date) {\n                var minDateTime = $.datepicker._get(dp_inst, 'minDateTime'),\n                    minDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);\n\n                if (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null || this.microsecMinOriginal === null) {\n                    this.hourMinOriginal = o.hourMin;\n                    this.minuteMinOriginal = o.minuteMin;\n                    this.secondMinOriginal = o.secondMin;\n                    this.millisecMinOriginal = o.millisecMin;\n                    this.microsecMinOriginal = o.microsecMin;\n                }\n\n                if (dp_inst.settings.timeOnly || minDateTimeDate.getTime() === dp_date.getTime()) {\n                    this._defaults.hourMin = minDateTime.getHours();\n                    if (this.hour <= this._defaults.hourMin) {\n                        this.hour = this._defaults.hourMin;\n                        this._defaults.minuteMin = minDateTime.getMinutes();\n                        if (this.minute <= this._defaults.minuteMin) {\n                            this.minute = this._defaults.minuteMin;\n                            this._defaults.secondMin = minDateTime.getSeconds();\n                            if (this.second <= this._defaults.secondMin) {\n                                this.second = this._defaults.secondMin;\n                                this._defaults.millisecMin = minDateTime.getMilliseconds();\n                                if (this.millisec <= this._defaults.millisecMin) {\n                                    this.millisec = this._defaults.millisecMin;\n                                    this._defaults.microsecMin = minDateTime.getMicroseconds();\n                                } else {\n                                    if (this.microsec < this._defaults.microsecMin) {\n                                        this.microsec = this._defaults.microsecMin;\n                                    }\n                                    this._defaults.microsecMin = this.microsecMinOriginal;\n                                }\n                            } else {\n                                this._defaults.millisecMin = this.millisecMinOriginal;\n                                this._defaults.microsecMin = this.microsecMinOriginal;\n                            }\n                        } else {\n                            this._defaults.secondMin = this.secondMinOriginal;\n                            this._defaults.millisecMin = this.millisecMinOriginal;\n                            this._defaults.microsecMin = this.microsecMinOriginal;\n                        }\n                    } else {\n                        this._defaults.minuteMin = this.minuteMinOriginal;\n                        this._defaults.secondMin = this.secondMinOriginal;\n                        this._defaults.millisecMin = this.millisecMinOriginal;\n                        this._defaults.microsecMin = this.microsecMinOriginal;\n                    }\n                } else {\n                    this._defaults.hourMin = this.hourMinOriginal;\n                    this._defaults.minuteMin = this.minuteMinOriginal;\n                    this._defaults.secondMin = this.secondMinOriginal;\n                    this._defaults.millisecMin = this.millisecMinOriginal;\n                    this._defaults.microsecMin = this.microsecMinOriginal;\n                }\n            }\n\n            if ($.datepicker._get(dp_inst, 'maxDateTime') !== null && $.datepicker._get(dp_inst, 'maxDateTime') !== undefined && dp_date) {\n                var maxDateTime = $.datepicker._get(dp_inst, 'maxDateTime'),\n                    maxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);\n\n                if (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null || this.millisecMaxOriginal === null) {\n                    this.hourMaxOriginal = o.hourMax;\n                    this.minuteMaxOriginal = o.minuteMax;\n                    this.secondMaxOriginal = o.secondMax;\n                    this.millisecMaxOriginal = o.millisecMax;\n                    this.microsecMaxOriginal = o.microsecMax;\n                }\n\n                if (dp_inst.settings.timeOnly || maxDateTimeDate.getTime() === dp_date.getTime()) {\n                    this._defaults.hourMax = maxDateTime.getHours();\n                    if (this.hour >= this._defaults.hourMax) {\n                        this.hour = this._defaults.hourMax;\n                        this._defaults.minuteMax = maxDateTime.getMinutes();\n                        if (this.minute >= this._defaults.minuteMax) {\n                            this.minute = this._defaults.minuteMax;\n                            this._defaults.secondMax = maxDateTime.getSeconds();\n                            if (this.second >= this._defaults.secondMax) {\n                                this.second = this._defaults.secondMax;\n                                this._defaults.millisecMax = maxDateTime.getMilliseconds();\n                                if (this.millisec >= this._defaults.millisecMax) {\n                                    this.millisec = this._defaults.millisecMax;\n                                    this._defaults.microsecMax = maxDateTime.getMicroseconds();\n                                } else {\n                                    if (this.microsec > this._defaults.microsecMax) {\n                                        this.microsec = this._defaults.microsecMax;\n                                    }\n                                    this._defaults.microsecMax = this.microsecMaxOriginal;\n                                }\n                            } else {\n                                this._defaults.millisecMax = this.millisecMaxOriginal;\n                                this._defaults.microsecMax = this.microsecMaxOriginal;\n                            }\n                        } else {\n                            this._defaults.secondMax = this.secondMaxOriginal;\n                            this._defaults.millisecMax = this.millisecMaxOriginal;\n                            this._defaults.microsecMax = this.microsecMaxOriginal;\n                        }\n                    } else {\n                        this._defaults.minuteMax = this.minuteMaxOriginal;\n                        this._defaults.secondMax = this.secondMaxOriginal;\n                        this._defaults.millisecMax = this.millisecMaxOriginal;\n                        this._defaults.microsecMax = this.microsecMaxOriginal;\n                    }\n                } else {\n                    this._defaults.hourMax = this.hourMaxOriginal;\n                    this._defaults.minuteMax = this.minuteMaxOriginal;\n                    this._defaults.secondMax = this.secondMaxOriginal;\n                    this._defaults.millisecMax = this.millisecMaxOriginal;\n                    this._defaults.microsecMax = this.microsecMaxOriginal;\n                }\n            }\n\n            if (dp_inst.settings.minTime !== null) {\n                var tempMinTime = new Date(\"01/01/1970 \" + dp_inst.settings.minTime);\n                if (this.hour < tempMinTime.getHours()) {\n                    this.hour = this._defaults.hourMin = tempMinTime.getHours();\n                    this.minute = this._defaults.minuteMin = tempMinTime.getMinutes();\n                } else if (this.hour === tempMinTime.getHours() && this.minute < tempMinTime.getMinutes()) {\n                    this.minute = this._defaults.minuteMin = tempMinTime.getMinutes();\n                } else {\n                    if (this._defaults.hourMin < tempMinTime.getHours()) {\n                        this._defaults.hourMin = tempMinTime.getHours();\n                        this._defaults.minuteMin = tempMinTime.getMinutes();\n                    } else if (this._defaults.hourMin === tempMinTime.getHours() === this.hour && this._defaults.minuteMin < tempMinTime.getMinutes()) {\n                        this._defaults.minuteMin = tempMinTime.getMinutes();\n                    } else {\n                        this._defaults.minuteMin = 0;\n                    }\n                }\n            }\n\n            if (dp_inst.settings.maxTime !== null) {\n                var tempMaxTime = new Date(\"01/01/1970 \" + dp_inst.settings.maxTime);\n                if (this.hour > tempMaxTime.getHours()) {\n                    this.hour = this._defaults.hourMax = tempMaxTime.getHours();\n                    this.minute = this._defaults.minuteMax = tempMaxTime.getMinutes();\n                } else if (this.hour === tempMaxTime.getHours() && this.minute > tempMaxTime.getMinutes()) {\n                    this.minute = this._defaults.minuteMax = tempMaxTime.getMinutes();\n                } else {\n                    if (this._defaults.hourMax > tempMaxTime.getHours()) {\n                        this._defaults.hourMax = tempMaxTime.getHours();\n                        this._defaults.minuteMax = tempMaxTime.getMinutes();\n                    } else if (this._defaults.hourMax === tempMaxTime.getHours() === this.hour && this._defaults.minuteMax > tempMaxTime.getMinutes()) {\n                        this._defaults.minuteMax = tempMaxTime.getMinutes();\n                    } else {\n                        this._defaults.minuteMax = 59;\n                    }\n                }\n            }\n\n            if (adjustSliders !== undefined && adjustSliders === true) {\n                var hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10),\n                    minMax = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10),\n                    secMax = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10),\n                    millisecMax = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10),\n                    microsecMax = parseInt((this._defaults.microsecMax - ((this._defaults.microsecMax - this._defaults.microsecMin) % this._defaults.stepMicrosec)), 10);\n\n                if (this.hour_slider) {\n                    this.control.options(this, this.hour_slider, 'hour', {\n                        min: this._defaults.hourMin,\n                        max: hourMax,\n                        step: this._defaults.stepHour\n                    });\n                    this.control.value(this, this.hour_slider, 'hour', this.hour - (this.hour % this._defaults.stepHour));\n                }\n                if (this.minute_slider) {\n                    this.control.options(this, this.minute_slider, 'minute', {\n                        min: this._defaults.minuteMin,\n                        max: minMax,\n                        step: this._defaults.stepMinute\n                    });\n                    this.control.value(this, this.minute_slider, 'minute', this.minute - (this.minute % this._defaults.stepMinute));\n                }\n                if (this.second_slider) {\n                    this.control.options(this, this.second_slider, 'second', {\n                        min: this._defaults.secondMin,\n                        max: secMax,\n                        step: this._defaults.stepSecond\n                    });\n                    this.control.value(this, this.second_slider, 'second', this.second - (this.second % this._defaults.stepSecond));\n                }\n                if (this.millisec_slider) {\n                    this.control.options(this, this.millisec_slider, 'millisec', {\n                        min: this._defaults.millisecMin,\n                        max: millisecMax,\n                        step: this._defaults.stepMillisec\n                    });\n                    this.control.value(this, this.millisec_slider, 'millisec', this.millisec - (this.millisec % this._defaults.stepMillisec));\n                }\n                if (this.microsec_slider) {\n                    this.control.options(this, this.microsec_slider, 'microsec', {\n                        min: this._defaults.microsecMin,\n                        max: microsecMax,\n                        step: this._defaults.stepMicrosec\n                    });\n                    this.control.value(this, this.microsec_slider, 'microsec', this.microsec - (this.microsec % this._defaults.stepMicrosec));\n                }\n            }\n\n        },\n\n        /*\n         * when a slider moves, set the internal time...\n         * on time change is also called when the time is updated in the text field\n         */\n        _onTimeChange: function() {\n            if (!this._defaults.showTimepicker) {\n                return;\n            }\n            var hour = (this.hour_slider) ? this.control.value(this, this.hour_slider, 'hour') : false,\n                minute = (this.minute_slider) ? this.control.value(this, this.minute_slider, 'minute') : false,\n                second = (this.second_slider) ? this.control.value(this, this.second_slider, 'second') : false,\n                millisec = (this.millisec_slider) ? this.control.value(this, this.millisec_slider, 'millisec') : false,\n                microsec = (this.microsec_slider) ? this.control.value(this, this.microsec_slider, 'microsec') : false,\n                timezone = (this.timezone_select) ? this.timezone_select.val() : false,\n                o = this._defaults,\n                pickerTimeFormat = o.pickerTimeFormat || o.timeFormat,\n                pickerTimeSuffix = o.pickerTimeSuffix || o.timeSuffix;\n\n            if (typeof(hour) === 'object') {\n                hour = false;\n            }\n            if (typeof(minute) === 'object') {\n                minute = false;\n            }\n            if (typeof(second) === 'object') {\n                second = false;\n            }\n            if (typeof(millisec) === 'object') {\n                millisec = false;\n            }\n            if (typeof(microsec) === 'object') {\n                microsec = false;\n            }\n            if (typeof(timezone) === 'object') {\n                timezone = false;\n            }\n\n            if (hour !== false) {\n                hour = parseInt(hour, 10);\n            }\n            if (minute !== false) {\n                minute = parseInt(minute, 10);\n            }\n            if (second !== false) {\n                second = parseInt(second, 10);\n            }\n            if (millisec !== false) {\n                millisec = parseInt(millisec, 10);\n            }\n            if (microsec !== false) {\n                microsec = parseInt(microsec, 10);\n            }\n            if (timezone !== false) {\n                timezone = timezone.toString();\n            }\n\n            var ampm = o[hour < 12 ? 'amNames' : 'pmNames'][0];\n\n            // If the update was done in the input field, the input field should not be updated.\n            // If the update was done using the sliders, update the input field.\n            var hasChanged = (\n                hour !== parseInt(this.hour, 10) || // sliders should all be numeric\n                minute !== parseInt(this.minute, 10) ||\n                second !== parseInt(this.second, 10) ||\n                millisec !== parseInt(this.millisec, 10) ||\n                microsec !== parseInt(this.microsec, 10) ||\n                (this.ampm.length > 0 && (hour < 12) !== ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) ||\n                (this.timezone !== null && timezone !== this.timezone.toString()) // could be numeric or \"EST\" format, so use toString()\n            );\n\n            if (hasChanged) {\n\n                if (hour !== false) {\n                    this.hour = hour;\n                }\n                if (minute !== false) {\n                    this.minute = minute;\n                }\n                if (second !== false) {\n                    this.second = second;\n                }\n                if (millisec !== false) {\n                    this.millisec = millisec;\n                }\n                if (microsec !== false) {\n                    this.microsec = microsec;\n                }\n                if (timezone !== false) {\n                    this.timezone = timezone;\n                }\n\n                if (!this.inst) {\n                    this.inst = $.datepicker._getInst(this.$input[0]);\n                }\n\n                this._limitMinMaxDateTime(this.inst, true);\n            }\n            if (this.support.ampm) {\n                this.ampm = ampm;\n            }\n\n            // Updates the time within the timepicker\n            this.formattedTime = $.datepicker.formatTime(o.timeFormat, this, o);\n            if (this.$timeObj) {\n                var sPos = this.$timeObj[0].selectionStart;\n                var ePos = this.$timeObj[0].selectionEnd;\n                if (pickerTimeFormat === o.timeFormat) {\n                    this.$timeObj.val(this.formattedTime + pickerTimeSuffix);\n                } else {\n                    this.$timeObj.val($.datepicker.formatTime(pickerTimeFormat, this, o) + pickerTimeSuffix);\n                }\n                this.$timeObj[0].setSelectionRange(sPos, ePos);\n            }\n\n            this.timeDefined = true;\n            if (hasChanged) {\n                this._updateDateTime();\n                //this.$input.focus(); // may automatically open the picker on setDate\n            }\n        },\n\n        /*\n         * call custom onSelect.\n         * bind to sliders slidestop, and grid click.\n         */\n        _onSelectHandler: function() {\n            var onSelect = this._defaults.onSelect || this.inst.settings.onSelect;\n            var inputEl = this.$input ? this.$input[0] : null;\n            if (onSelect && inputEl) {\n                onSelect.apply(inputEl, [this.formattedDateTime, this]);\n            }\n        },\n\n        /*\n         * update our input with the new date time..\n         */\n        _updateDateTime: function(dp_inst) {\n            dp_inst = this.inst || dp_inst;\n            var dtTmp = (dp_inst.currentYear > 0 ?\n                    new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay) :\n                    new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),\n                dt = $.datepicker._daylightSavingAdjust(dtTmp),\n                //dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),\n                //dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay)),\n                dateFmt = $.datepicker._get(dp_inst, 'dateFormat'),\n                formatCfg = $.datepicker._getFormatConfig(dp_inst),\n                timeAvailable = dt !== null && this.timeDefined;\n            this.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);\n            var formattedDateTime = this.formattedDate;\n\n            // if a slider was changed but datepicker doesn't have a value yet, set it\n            if (dp_inst.lastVal === \"\") {\n                dp_inst.currentYear = dp_inst.selectedYear;\n                dp_inst.currentMonth = dp_inst.selectedMonth;\n                dp_inst.currentDay = dp_inst.selectedDay;\n            }\n\n            /*\n             * remove following lines to force every changes in date picker to change the input value\n             * Bug descriptions: when an input field has a default value, and click on the field to pop up the date picker. \n             * If the user manually empty the value in the input field, the date picker will never change selected value.\n             */\n            //if (dp_inst.lastVal !== undefined && (dp_inst.lastVal.length > 0 && this.$input.val().length === 0)) {\n            //\treturn;\n            //}\n\n            if (this._defaults.timeOnly === true && this._defaults.timeOnlyShowDate === false) {\n                formattedDateTime = this.formattedTime;\n            } else if ((this._defaults.timeOnly !== true && (this._defaults.alwaysSetTime || timeAvailable)) || (this._defaults.timeOnly === true && this._defaults.timeOnlyShowDate === true)) {\n                formattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix;\n            }\n\n            this.formattedDateTime = formattedDateTime;\n\n            if (!this._defaults.showTimepicker) {\n                this.$input.val(this.formattedDate);\n            } else if (this.$altInput && this._defaults.timeOnly === false && this._defaults.altFieldTimeOnly === true) {\n                this.$altInput.val(this.formattedTime);\n                this.$input.val(this.formattedDate);\n            } else if (this.$altInput) {\n                this.$input.val(formattedDateTime);\n                var altFormattedDateTime = '',\n                    altSeparator = this._defaults.altSeparator !== null ? this._defaults.altSeparator : this._defaults.separator,\n                    altTimeSuffix = this._defaults.altTimeSuffix !== null ? this._defaults.altTimeSuffix : this._defaults.timeSuffix;\n\n                if (!this._defaults.timeOnly) {\n                    if (this._defaults.altFormat) {\n                        altFormattedDateTime = $.datepicker.formatDate(this._defaults.altFormat, (dt === null ? new Date() : dt), formatCfg);\n                    } else {\n                        altFormattedDateTime = this.formattedDate;\n                    }\n\n                    if (altFormattedDateTime) {\n                        altFormattedDateTime += altSeparator;\n                    }\n                }\n\n                if (this._defaults.altTimeFormat !== null) {\n                    altFormattedDateTime += $.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + altTimeSuffix;\n                } else {\n                    altFormattedDateTime += this.formattedTime + altTimeSuffix;\n                }\n                this.$altInput.val(altFormattedDateTime);\n            } else {\n                this.$input.val(formattedDateTime);\n            }\n\n            this.$input.trigger(\"change\");\n        },\n\n        _onFocus: function() {\n            if (!this.$input.val() && this._defaults.defaultValue) {\n                this.$input.val(this._defaults.defaultValue);\n                var inst = $.datepicker._getInst(this.$input.get(0)),\n                    tp_inst = $.datepicker._get(inst, 'timepicker');\n                if (tp_inst) {\n                    if (tp_inst._defaults.timeOnly && (inst.input.val() !== inst.lastVal)) {\n                        try {\n                            $.datepicker._updateDatepicker(inst);\n                        } catch (err) {\n                            $.timepicker.log(err);\n                        }\n                    }\n                }\n            }\n        },\n\n        /*\n         * Small abstraction to control types\n         * We can add more, just be sure to follow the pattern: create, options, value\n         */\n        _controls: {\n            // slider methods\n            slider: {\n                create: function(tp_inst, obj, unit, val, min, max, step) {\n                    var rtl = tp_inst._defaults.isRTL; // if rtl go -60->0 instead of 0->60\n                    return obj.prop('slide', null).slider({\n                        orientation: \"horizontal\",\n                        value: rtl ? val * -1 : val,\n                        min: rtl ? max * -1 : min,\n                        max: rtl ? min * -1 : max,\n                        step: step,\n                        slide: function(event, ui) {\n                            tp_inst.control.value(tp_inst, $(this), unit, rtl ? ui.value * -1 : ui.value);\n                            tp_inst._onTimeChange();\n                        },\n                        stop: function(event, ui) {\n                            tp_inst._onSelectHandler();\n                        }\n                    });\n                },\n                options: function(tp_inst, obj, unit, opts, val) {\n                    if (tp_inst._defaults.isRTL) {\n                        if (typeof(opts) === 'string') {\n                            if (opts === 'min' || opts === 'max') {\n                                if (val !== undefined) {\n                                    return obj.slider(opts, val * -1);\n                                }\n                                return Math.abs(obj.slider(opts));\n                            }\n                            return obj.slider(opts);\n                        }\n                        var min = opts.min,\n                            max = opts.max;\n                        opts.min = opts.max = null;\n                        if (min !== undefined) {\n                            opts.max = min * -1;\n                        }\n                        if (max !== undefined) {\n                            opts.min = max * -1;\n                        }\n                        return obj.slider(opts);\n                    }\n                    if (typeof(opts) === 'string' && val !== undefined) {\n                        return obj.slider(opts, val);\n                    }\n                    return obj.slider(opts);\n                },\n                value: function(tp_inst, obj, unit, val) {\n                    if (tp_inst._defaults.isRTL) {\n                        if (val !== undefined) {\n                            return obj.slider('value', val * -1);\n                        }\n                        return Math.abs(obj.slider('value'));\n                    }\n                    if (val !== undefined) {\n                        return obj.slider('value', val);\n                    }\n                    return obj.slider('value');\n                }\n            },\n            // select methods\n            select: {\n                create: function(tp_inst, obj, unit, val, min, max, step) {\n                    var sel = '<select class=\"ui-timepicker-select ui-state-default ui-corner-all\" data-unit=\"' + unit + '\" data-min=\"' + min + '\" data-max=\"' + max + '\" data-step=\"' + step + '\">',\n                        format = tp_inst._defaults.pickerTimeFormat || tp_inst._defaults.timeFormat;\n\n                    for (var i = min; i <= max; i += step) {\n                        sel += '<option value=\"' + i + '\"' + (i === val ? ' selected' : '') + '>';\n                        if (unit === 'hour') {\n                            sel += $.datepicker.formatTime($.trim(format.replace(/[^ht ]/ig, '')), {\n                                hour: i\n                            }, tp_inst._defaults);\n                        } else if (unit === 'millisec' || unit === 'microsec' || i >= 10) {\n                            sel += i;\n                        } else {\n                            sel += '0' + i.toString();\n                        }\n                        sel += '</option>';\n                    }\n                    sel += '</select>';\n\n                    obj.children('select').remove();\n\n                    $(sel).appendTo(obj).change(function(e) {\n                        tp_inst._onTimeChange();\n                        tp_inst._onSelectHandler();\n                        tp_inst._afterInject();\n                    });\n\n                    return obj;\n                },\n                options: function(tp_inst, obj, unit, opts, val) {\n                    var o = {},\n                        $t = obj.children('select');\n                    if (typeof(opts) === 'string') {\n                        if (val === undefined) {\n                            return $t.data(opts);\n                        }\n                        o[opts] = val;\n                    } else {\n                        o = opts;\n                    }\n                    return tp_inst.control.create(tp_inst, obj, $t.data('unit'), $t.val(), o.min >= 0 ? o.min : $t.data('min'), o.max || $t.data('max'), o.step || $t.data('step'));\n                },\n                value: function(tp_inst, obj, unit, val) {\n                    var $t = obj.children('select');\n                    if (val !== undefined) {\n                        return $t.val(val);\n                    }\n                    return $t.val();\n                }\n            }\n        } // end _controls\n\n    });\n\n    $.fn.extend({\n        /*\n         * shorthand just to use timepicker.\n         */\n        timepicker: function(o) {\n            o = o || {};\n            var tmp_args = Array.prototype.slice.call(arguments);\n\n            if (typeof o === 'object') {\n                tmp_args[0] = $.extend(o, {\n                    timeOnly: true\n                });\n            }\n\n            return $(this).each(function() {\n                $.fn.datetimepicker.apply($(this), tmp_args);\n            });\n        },\n\n        /*\n         * extend timepicker to datepicker\n         */\n        datetimepicker: function(o) {\n            o = o || {};\n            var tmp_args = arguments;\n\n            if (typeof(o) === 'string') {\n                if (o === 'getDate' || (o === 'option' && tmp_args.length === 2 && typeof(tmp_args[1]) === 'string')) {\n                    return $.fn.datepicker.apply($(this[0]), tmp_args);\n                } else {\n                    return this.each(function() {\n                        var $t = $(this);\n                        $t.datepicker.apply($t, tmp_args);\n                    });\n                }\n            } else {\n                return this.each(function() {\n                    var $t = $(this);\n                    $t.datepicker($.timepicker._newInst($t, o)._defaults);\n                });\n            }\n        }\n    });\n\n    /*\n     * Public Utility to parse date and time\n     */\n    $.datepicker.parseDateTime = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {\n        var parseRes = parseDateTimeInternal(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings);\n        if (parseRes.timeObj) {\n            var t = parseRes.timeObj;\n            parseRes.date.setHours(t.hour, t.minute, t.second, t.millisec);\n            parseRes.date.setMicroseconds(t.microsec);\n        }\n\n        return parseRes.date;\n    };\n\n    /*\n     * Public utility to parse time\n     */\n    $.datepicker.parseTime = function(timeFormat, timeString, options) {\n        var o = extendRemove(extendRemove({}, $.timepicker._defaults), options || {}),\n            iso8601 = (timeFormat.replace(/\\'.*?\\'/g, '').indexOf('Z') !== -1);\n\n        // Strict parse requires the timeString to match the timeFormat exactly\n        var strictParse = function(f, s, o) {\n\n            // pattern for standard and localized AM/PM markers\n            var getPatternAmpm = function(amNames, pmNames) {\n                var markers = [];\n                if (amNames) {\n                    $.merge(markers, amNames);\n                }\n                if (pmNames) {\n                    $.merge(markers, pmNames);\n                }\n                markers = $.map(markers, function(val) {\n                    return val.replace(/[.*+?|()\\[\\]{}\\\\]/g, '\\\\$&');\n                });\n                return '(' + markers.join('|') + ')?';\n            };\n\n            // figure out position of time elements.. cause js cant do named captures\n            var getFormatPositions = function(timeFormat) {\n                var finds = timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),\n                    orders = {\n                        h: -1,\n                        m: -1,\n                        s: -1,\n                        l: -1,\n                        c: -1,\n                        t: -1,\n                        z: -1\n                    };\n\n                if (finds) {\n                    for (var i = 0; i < finds.length; i++) {\n                        if (orders[finds[i].toString().charAt(0)] === -1) {\n                            orders[finds[i].toString().charAt(0)] = i + 1;\n                        }\n                    }\n                }\n                return orders;\n            };\n\n            var regstr = '^' + f.toString()\n                .replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function(match) {\n                    var ml = match.length;\n                    switch (match.charAt(0).toLowerCase()) {\n                        case 'h':\n                            return ml === 1 ? '(\\\\d?\\\\d)' : '(\\\\d{' + ml + '})';\n                        case 'm':\n                            return ml === 1 ? '(\\\\d?\\\\d)' : '(\\\\d{' + ml + '})';\n                        case 's':\n                            return ml === 1 ? '(\\\\d?\\\\d)' : '(\\\\d{' + ml + '})';\n                        case 'l':\n                            return '(\\\\d?\\\\d?\\\\d)';\n                        case 'c':\n                            return '(\\\\d?\\\\d?\\\\d)';\n                        case 'z':\n                            return '(z|[-+]\\\\d\\\\d:?\\\\d\\\\d|\\\\S+)?';\n                        case 't':\n                            return getPatternAmpm(o.amNames, o.pmNames);\n                        default: // literal escaped in quotes\n                            return '(' + match.replace(/\\'/g, \"\").replace(/(\\.|\\$|\\^|\\\\|\\/|\\(|\\)|\\[|\\]|\\?|\\+|\\*)/g, function(m) {\n                                return \"\\\\\" + m;\n                            }) + ')?';\n                    }\n                })\n                .replace(/\\s/g, '\\\\s?') +\n                o.timeSuffix + '$',\n                order = getFormatPositions(f),\n                ampm = '',\n                treg;\n\n            treg = s.match(new RegExp(regstr, 'i'));\n\n            var resTime = {\n                hour: 0,\n                minute: 0,\n                second: 0,\n                millisec: 0,\n                microsec: 0\n            };\n\n            if (treg) {\n                if (order.t !== -1) {\n                    if (treg[order.t] === undefined || treg[order.t].length === 0) {\n                        ampm = '';\n                        resTime.ampm = '';\n                    } else {\n                        ampm = $.inArray(treg[order.t].toUpperCase(), $.map(o.amNames, function(x, i) {\n                            return x.toUpperCase();\n                        })) !== -1 ? 'AM' : 'PM';\n                        resTime.ampm = o[ampm === 'AM' ? 'amNames' : 'pmNames'][0];\n                    }\n                }\n\n                if (order.h !== -1) {\n                    if (ampm === 'AM' && treg[order.h] === '12') {\n                        resTime.hour = 0; // 12am = 0 hour\n                    } else {\n                        if (ampm === 'PM' && treg[order.h] !== '12') {\n                            resTime.hour = parseInt(treg[order.h], 10) + 12; // 12pm = 12 hour, any other pm = hour + 12\n                        } else {\n                            resTime.hour = Number(treg[order.h]);\n                        }\n                    }\n                }\n\n                if (order.m !== -1) {\n                    resTime.minute = Number(treg[order.m]);\n                }\n                if (order.s !== -1) {\n                    resTime.second = Number(treg[order.s]);\n                }\n                if (order.l !== -1) {\n                    resTime.millisec = Number(treg[order.l]);\n                }\n                if (order.c !== -1) {\n                    resTime.microsec = Number(treg[order.c]);\n                }\n                if (order.z !== -1 && treg[order.z] !== undefined) {\n                    resTime.timezone = $.timepicker.timezoneOffsetNumber(treg[order.z]);\n                }\n\n\n                return resTime;\n            }\n            return false;\n        }; // end strictParse\n\n        // First try JS Date, if that fails, use strictParse\n        var looseParse = function(f, s, o) {\n            try {\n                var d = new Date('2012-01-01 ' + s);\n                if (isNaN(d.getTime())) {\n                    d = new Date('2012-01-01T' + s);\n                    if (isNaN(d.getTime())) {\n                        d = new Date('01/01/2012 ' + s);\n                        if (isNaN(d.getTime())) {\n                            throw \"Unable to parse time with native Date: \" + s;\n                        }\n                    }\n                }\n\n                return {\n                    hour: d.getHours(),\n                    minute: d.getMinutes(),\n                    second: d.getSeconds(),\n                    millisec: d.getMilliseconds(),\n                    microsec: d.getMicroseconds(),\n                    timezone: d.getTimezoneOffset() * -1\n                };\n            } catch (err) {\n                try {\n                    return strictParse(f, s, o);\n                } catch (err2) {\n                    $.timepicker.log(\"Unable to parse \\ntimeString: \" + s + \"\\ntimeFormat: \" + f);\n                }\n            }\n            return false;\n        }; // end looseParse\n\n        if (typeof o.parse === \"function\") {\n            return o.parse(timeFormat, timeString, o);\n        }\n        if (o.parse === 'loose') {\n            return looseParse(timeFormat, timeString, o);\n        }\n        return strictParse(timeFormat, timeString, o);\n    };\n\n    /**\n     * Public utility to format the time\n     * @param {string} format format of the time\n     * @param {Object} time Object not a Date for timezones\n     * @param {Object} [options] essentially the regional[].. amNames, pmNames, ampm\n     * @returns {string} the formatted time\n     */\n    $.datepicker.formatTime = function(format, time, options) {\n        options = options || {};\n        options = $.extend({}, $.timepicker._defaults, options);\n        time = $.extend({\n            hour: 0,\n            minute: 0,\n            second: 0,\n            millisec: 0,\n            microsec: 0,\n            timezone: null\n        }, time);\n\n        var tmptime = format,\n            ampmName = options.amNames[0],\n            hour = parseInt(time.hour, 10);\n\n        if (hour > 11) {\n            ampmName = options.pmNames[0];\n        }\n\n        tmptime = tmptime.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function(match) {\n            switch (match) {\n                case 'HH':\n                    return ('0' + hour).slice(-2);\n                case 'H':\n                    return hour;\n                case 'hh':\n                    return ('0' + convert24to12(hour)).slice(-2);\n                case 'h':\n                    return convert24to12(hour);\n                case 'mm':\n                    return ('0' + time.minute).slice(-2);\n                case 'm':\n                    return time.minute;\n                case 'ss':\n                    return ('0' + time.second).slice(-2);\n                case 's':\n                    return time.second;\n                case 'l':\n                    return ('00' + time.millisec).slice(-3);\n                case 'c':\n                    return ('00' + time.microsec).slice(-3);\n                case 'z':\n                    return $.timepicker.timezoneOffsetString(time.timezone === null ? options.timezone : time.timezone, false);\n                case 'Z':\n                    return $.timepicker.timezoneOffsetString(time.timezone === null ? options.timezone : time.timezone, true);\n                case 'T':\n                    return ampmName.charAt(0).toUpperCase();\n                case 'TT':\n                    return ampmName.toUpperCase();\n                case 't':\n                    return ampmName.charAt(0).toLowerCase();\n                case 'tt':\n                    return ampmName.toLowerCase();\n                default:\n                    return match.replace(/'/g, \"\");\n            }\n        });\n\n        return tmptime;\n    };\n\n    /*\n    * the bad hack :/ override datepicker so it doesn't close on select\n    // inspired: http://stackoverflow.com/questions/1252512/jquery-datepicker-prevent-closing-picker-when-clicking-a-date/1762378#1762378\n    */\n    $.datepicker._base_selectDate = $.datepicker._selectDate;\n    $.datepicker._selectDate = function(id, dateStr) {\n        var inst = this._getInst($(id)[0]),\n            tp_inst = this._get(inst, 'timepicker'),\n            was_inline;\n\n        if (tp_inst && inst.settings.showTimepicker) {\n            tp_inst._limitMinMaxDateTime(inst, true);\n            was_inline = inst.inline;\n            inst.inline = inst.stay_open = true;\n            //This way the onSelect handler called from calendarpicker get the full dateTime\n            this._base_selectDate(id, dateStr);\n            inst.inline = was_inline;\n            inst.stay_open = false;\n            this._notifyChange(inst);\n            this._updateDatepicker(inst);\n        } else {\n            this._base_selectDate(id, dateStr);\n        }\n    };\n\n    /*\n     * second bad hack :/ override datepicker so it triggers an event when changing the input field\n     * and does not redraw the datepicker on every selectDate event\n     */\n    $.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;\n    $.datepicker._updateDatepicker = function(inst) {\n\n        // don't popup the datepicker if there is another instance already opened\n        var input = inst.input[0];\n        if ($.datepicker._curInst && $.datepicker._curInst !== inst && $.datepicker._datepickerShowing && $.datepicker._lastInput !== input) {\n            return;\n        }\n\n        if (typeof(inst.stay_open) !== 'boolean' || inst.stay_open === false) {\n\n            this._base_updateDatepicker(inst);\n\n            // Reload the time control when changing something in the input text field.\n            var tp_inst = this._get(inst, 'timepicker');\n            if (tp_inst) {\n                tp_inst._addTimePicker(inst);\n            }\n        }\n    };\n\n    /*\n     * third bad hack :/ override datepicker so it allows spaces and colon in the input field\n     */\n    $.datepicker._base_doKeyPress = $.datepicker._doKeyPress;\n    $.datepicker._doKeyPress = function(event) {\n        var inst = $.datepicker._getInst(event.target),\n            tp_inst = $.datepicker._get(inst, 'timepicker');\n\n        if (tp_inst) {\n            if ($.datepicker._get(inst, 'constrainInput')) {\n                var ampm = tp_inst.support.ampm,\n                    tz = tp_inst._defaults.showTimezone !== null ? tp_inst._defaults.showTimezone : tp_inst.support.timezone,\n                    dateChars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat')),\n                    datetimeChars = tp_inst._defaults.timeFormat.toString()\n                    .replace(/[hms]/g, '')\n                    .replace(/TT/g, ampm ? 'APM' : '')\n                    .replace(/Tt/g, ampm ? 'AaPpMm' : '')\n                    .replace(/tT/g, ampm ? 'AaPpMm' : '')\n                    .replace(/T/g, ampm ? 'AP' : '')\n                    .replace(/tt/g, ampm ? 'apm' : '')\n                    .replace(/t/g, ampm ? 'ap' : '') +\n                    \" \" + tp_inst._defaults.separator +\n                    tp_inst._defaults.timeSuffix +\n                    (tz ? tp_inst._defaults.timezoneList.join('') : '') +\n                    (tp_inst._defaults.amNames.join('')) + (tp_inst._defaults.pmNames.join('')) +\n                    dateChars,\n                    chr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);\n                return event.ctrlKey || (chr < ' ' || !dateChars || datetimeChars.indexOf(chr) > -1);\n            }\n        }\n\n        return $.datepicker._base_doKeyPress(event);\n    };\n\n    /*\n     * Fourth bad hack :/ override _updateAlternate function used in inline mode to init altField\n     * Update any alternate field to synchronise with the main field.\n     */\n    $.datepicker._base_updateAlternate = $.datepicker._updateAlternate;\n    $.datepicker._updateAlternate = function(inst) {\n        var tp_inst = this._get(inst, 'timepicker');\n        if (tp_inst) {\n            var altField = tp_inst._defaults.altField;\n            if (altField) { // update alternate field too\n                var altFormat = tp_inst._defaults.altFormat || tp_inst._defaults.dateFormat,\n                    date = this._getDate(inst),\n                    formatCfg = $.datepicker._getFormatConfig(inst),\n                    altFormattedDateTime = '',\n                    altSeparator = tp_inst._defaults.altSeparator ? tp_inst._defaults.altSeparator : tp_inst._defaults.separator,\n                    altTimeSuffix = tp_inst._defaults.altTimeSuffix ? tp_inst._defaults.altTimeSuffix : tp_inst._defaults.timeSuffix,\n                    altTimeFormat = tp_inst._defaults.altTimeFormat !== null ? tp_inst._defaults.altTimeFormat : tp_inst._defaults.timeFormat;\n\n                altFormattedDateTime += $.datepicker.formatTime(altTimeFormat, tp_inst, tp_inst._defaults) + altTimeSuffix;\n                if (!tp_inst._defaults.timeOnly && !tp_inst._defaults.altFieldTimeOnly && date !== null) {\n                    if (tp_inst._defaults.altFormat) {\n                        altFormattedDateTime = $.datepicker.formatDate(tp_inst._defaults.altFormat, date, formatCfg) + altSeparator + altFormattedDateTime;\n                    } else {\n                        altFormattedDateTime = tp_inst.formattedDate + altSeparator + altFormattedDateTime;\n                    }\n                }\n                $(altField).val(inst.input.val() ? altFormattedDateTime : \"\");\n            }\n        } else {\n            $.datepicker._base_updateAlternate(inst);\n        }\n    };\n\n    /*\n     * Override key up event to sync manual input changes.\n     */\n    $.datepicker._base_doKeyUp = $.datepicker._doKeyUp;\n    $.datepicker._doKeyUp = function(event) {\n        var inst = $.datepicker._getInst(event.target),\n            tp_inst = $.datepicker._get(inst, 'timepicker');\n\n        if (tp_inst) {\n            if (tp_inst._defaults.timeOnly && (inst.input.val() !== inst.lastVal)) {\n                try {\n                    $.datepicker._updateDatepicker(inst);\n                } catch (err) {\n                    $.timepicker.log(err);\n                }\n            }\n        }\n\n        return $.datepicker._base_doKeyUp(event);\n    };\n\n    /*\n     * override \"Today\" button to also grab the time and set it to input field.\n     */\n    $.datepicker._base_gotoToday = $.datepicker._gotoToday;\n    $.datepicker._gotoToday = function(id) {\n        var inst = this._getInst($(id)[0]);\n        this._base_gotoToday(id);\n        var tp_inst = this._get(inst, 'timepicker');\n        var tzoffset = $.timepicker.timezoneOffsetNumber(tp_inst.timezone);\n        var now = new Date();\n        now.setMinutes(now.getMinutes() + now.getTimezoneOffset() + tzoffset);\n        this._setTime(inst, now);\n        this._setDate(inst, now);\n        tp_inst._onSelectHandler();\n    };\n\n    /*\n     * Disable & enable the Time in the datetimepicker\n     */\n    $.datepicker._disableTimepickerDatepicker = function(target) {\n        var inst = this._getInst(target);\n        if (!inst) {\n            return;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n        $(target).datepicker('getDate'); // Init selected[Year|Month|Day]\n        if (tp_inst) {\n            inst.settings.showTimepicker = false;\n            tp_inst._defaults.showTimepicker = false;\n            tp_inst._updateDateTime(inst);\n        }\n    };\n\n    $.datepicker._enableTimepickerDatepicker = function(target) {\n        var inst = this._getInst(target);\n        if (!inst) {\n            return;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n        $(target).datepicker('getDate'); // Init selected[Year|Month|Day]\n        if (tp_inst) {\n            inst.settings.showTimepicker = true;\n            tp_inst._defaults.showTimepicker = true;\n            tp_inst._addTimePicker(inst); // Could be disabled on page load\n            tp_inst._updateDateTime(inst);\n        }\n    };\n\n    /*\n     * Create our own set time function\n     */\n    $.datepicker._setTime = function(inst, date) {\n        var tp_inst = this._get(inst, 'timepicker');\n        if (tp_inst) {\n            var defaults = tp_inst._defaults;\n\n            // calling _setTime with no date sets time to defaults\n            tp_inst.hour = date ? date.getHours() : defaults.hour;\n            tp_inst.minute = date ? date.getMinutes() : defaults.minute;\n            tp_inst.second = date ? date.getSeconds() : defaults.second;\n            tp_inst.millisec = date ? date.getMilliseconds() : defaults.millisec;\n            tp_inst.microsec = date ? date.getMicroseconds() : defaults.microsec;\n\n            //check if within min/max times.. \n            tp_inst._limitMinMaxDateTime(inst, true);\n\n            tp_inst._onTimeChange();\n            tp_inst._updateDateTime(inst);\n        }\n    };\n\n    /*\n     * Create new public method to set only time, callable as $().datepicker('setTime', date)\n     */\n    $.datepicker._setTimeDatepicker = function(target, date, withDate) {\n        var inst = this._getInst(target);\n        if (!inst) {\n            return;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n\n        if (tp_inst) {\n            this._setDateFromField(inst);\n            var tp_date;\n            if (date) {\n                if (typeof date === \"string\") {\n                    tp_inst._parseTime(date, withDate);\n                    tp_date = new Date();\n                    tp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);\n                    tp_date.setMicroseconds(tp_inst.microsec);\n                } else {\n                    tp_date = new Date(date.getTime());\n                    tp_date.setMicroseconds(date.getMicroseconds());\n                }\n                if (tp_date.toString() === 'Invalid Date') {\n                    tp_date = undefined;\n                }\n                this._setTime(inst, tp_date);\n            }\n        }\n\n    };\n\n    /*\n     * override setDate() to allow setting time too within Date object\n     */\n    $.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;\n    $.datepicker._setDateDatepicker = function(target, _date) {\n        var inst = this._getInst(target);\n        var date = _date;\n        if (!inst) {\n            return;\n        }\n\n        if (typeof(_date) === 'string') {\n            date = new Date(_date);\n            if (!date.getTime()) {\n                this._base_setDateDatepicker.apply(this, arguments);\n                date = $(target).datepicker('getDate');\n            }\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n        var tp_date;\n        if (date instanceof Date) {\n            tp_date = new Date(date.getTime());\n            tp_date.setMicroseconds(date.getMicroseconds());\n        } else {\n            tp_date = date;\n        }\n\n        // This is important if you are using the timezone option, javascript's Date \n        // object will only return the timezone offset for the current locale, so we \n        // adjust it accordingly.  If not using timezone option this won't matter..\n        // If a timezone is different in tp, keep the timezone as is\n        if (tp_inst && tp_date) {\n            // look out for DST if tz wasn't specified\n            if (!tp_inst.support.timezone && tp_inst._defaults.timezone === null) {\n                tp_inst.timezone = tp_date.getTimezoneOffset() * -1;\n            }\n            date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);\n            tp_date = $.timepicker.timezoneAdjust(tp_date, tp_inst.timezone);\n        }\n\n        this._updateDatepicker(inst);\n        this._base_setDateDatepicker.apply(this, arguments);\n        this._setTimeDatepicker(target, tp_date, true);\n    };\n\n    /*\n     * override getDate() to allow getting time too within Date object\n     */\n    $.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;\n    $.datepicker._getDateDatepicker = function(target, noDefault) {\n        var inst = this._getInst(target);\n        if (!inst) {\n            return;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n\n        if (tp_inst) {\n            // if it hasn't yet been defined, grab from field\n            if (inst.lastVal === undefined) {\n                this._setDateFromField(inst, noDefault);\n            }\n\n            var date = this._getDate(inst);\n            var currDT = $.trim((tp_inst.$altInput && tp_inst._defaults.altFieldTimeOnly) ? tp_inst.$input.val() + ' ' + tp_inst.$altInput.val() : tp_inst.$input.val());\n            if (date && tp_inst._parseTime(currDT, !inst.settings.timeOnly)) {\n                date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);\n                date.setMicroseconds(tp_inst.microsec);\n\n                // This is important if you are using the timezone option, javascript's Date \n                // object will only return the timezone offset for the current locale, so we \n                // adjust it accordingly.  If not using timezone option this won't matter..\n                if (tp_inst.timezone != null) {\n                    // look out for DST if tz wasn't specified\n                    if (!tp_inst.support.timezone && tp_inst._defaults.timezone === null) {\n                        tp_inst.timezone = date.getTimezoneOffset() * -1;\n                    }\n                    date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);\n                }\n            }\n            return date;\n        }\n        return this._base_getDateDatepicker(target, noDefault);\n    };\n\n    /*\n     * override parseDate() because UI 1.8.14 throws an error about \"Extra characters\"\n     * An option in datapicker to ignore extra format characters would be nicer.\n     */\n    $.datepicker._base_parseDate = $.datepicker.parseDate;\n    $.datepicker.parseDate = function(format, value, settings) {\n        var date;\n        try {\n            date = this._base_parseDate(format, value, settings);\n        } catch (err) {\n            // Hack!  The error message ends with a colon, a space, and\n            // the \"extra\" characters.  We rely on that instead of\n            // attempting to perfectly reproduce the parsing algorithm.\n            if (err.indexOf(\":\") >= 0) {\n                date = this._base_parseDate(format, value.substring(0, value.length - (err.length - err.indexOf(':') - 2)), settings);\n                $.timepicker.log(\"Error parsing the date string: \" + err + \"\\ndate string = \" + value + \"\\ndate format = \" + format);\n            } else {\n                throw err;\n            }\n        }\n        return date;\n    };\n\n    /*\n     * override formatDate to set date with time to the input\n     */\n    $.datepicker._base_formatDate = $.datepicker._formatDate;\n    $.datepicker._formatDate = function(inst, day, month, year) {\n        var tp_inst = this._get(inst, 'timepicker');\n        if (tp_inst) {\n            tp_inst._updateDateTime(inst);\n            return tp_inst.$input.val();\n        }\n        return this._base_formatDate(inst);\n    };\n\n    /*\n     * override options setter to add time to maxDate(Time) and minDate(Time). MaxDate\n     */\n    $.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;\n    $.datepicker._optionDatepicker = function(target, name, value) {\n        var inst = this._getInst(target),\n            name_clone;\n        if (!inst) {\n            return null;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n        if (tp_inst) {\n            var min = null,\n                max = null,\n                onselect = null,\n                overrides = tp_inst._defaults.evnts,\n                fns = {},\n                prop,\n                ret,\n                oldVal,\n                $target;\n            if (typeof name === 'string') { // if min/max was set with the string\n                if (name === 'minDate' || name === 'minDateTime') {\n                    min = value;\n                } else if (name === 'maxDate' || name === 'maxDateTime') {\n                    max = value;\n                } else if (name === 'onSelect') {\n                    onselect = value;\n                } else if (overrides.hasOwnProperty(name)) {\n                    if (typeof(value) === 'undefined') {\n                        return overrides[name];\n                    }\n                    fns[name] = value;\n                    name_clone = {}; //empty results in exiting function after overrides updated\n                }\n            } else if (typeof name === 'object') { //if min/max was set with the JSON\n                if (name.minDate) {\n                    min = name.minDate;\n                } else if (name.minDateTime) {\n                    min = name.minDateTime;\n                } else if (name.maxDate) {\n                    max = name.maxDate;\n                } else if (name.maxDateTime) {\n                    max = name.maxDateTime;\n                }\n                for (prop in overrides) {\n                    if (overrides.hasOwnProperty(prop) && name[prop]) {\n                        fns[prop] = name[prop];\n                    }\n                }\n            }\n            for (prop in fns) {\n                if (fns.hasOwnProperty(prop)) {\n                    overrides[prop] = fns[prop];\n                    if (!name_clone) {\n                        name_clone = $.extend({}, name);\n                    }\n                    delete name_clone[prop];\n                }\n            }\n            if (name_clone && isEmptyObject(name_clone)) {\n                return;\n            }\n            if (min) { //if min was set\n                if (min === 0) {\n                    min = new Date();\n                } else {\n                    min = new Date(min);\n                }\n                tp_inst._defaults.minDate = min;\n                tp_inst._defaults.minDateTime = min;\n            } else if (max) { //if max was set\n                if (max === 0) {\n                    max = new Date();\n                } else {\n                    max = new Date(max);\n                }\n                tp_inst._defaults.maxDate = max;\n                tp_inst._defaults.maxDateTime = max;\n            } else if (onselect) {\n                tp_inst._defaults.onSelect = onselect;\n            }\n\n            // Datepicker will override our date when we call _base_optionDatepicker when \n            // calling minDate/maxDate, so we will first grab the value, call \n            // _base_optionDatepicker, then set our value back.\n            if (min || max) {\n                $target = $(target);\n                oldVal = $target.datetimepicker('getDate');\n                ret = this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value);\n                $target.datetimepicker('setDate', oldVal);\n                return ret;\n            }\n        }\n        if (value === undefined) {\n            return this._base_optionDatepicker.call($.datepicker, target, name);\n        }\n        return this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value);\n    };\n\n    /*\n     * jQuery isEmptyObject does not check hasOwnProperty - if someone has added to the object prototype,\n     * it will return false for all objects\n     */\n    var isEmptyObject = function(obj) {\n        var prop;\n        for (prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /*\n     * jQuery extend now ignores nulls!\n     */\n    var extendRemove = function(target, props) {\n        $.extend(target, props);\n        for (var name in props) {\n            if (props[name] === null || props[name] === undefined) {\n                target[name] = props[name];\n            }\n        }\n        return target;\n    };\n\n    /*\n     * Determine by the time format which units are supported\n     * Returns an object of booleans for each unit\n     */\n    var detectSupport = function(timeFormat) {\n        var tf = timeFormat.replace(/'.*?'/g, '').toLowerCase(), // removes literals\n            isIn = function(f, t) { // does the format contain the token?\n                return f.indexOf(t) !== -1 ? true : false;\n            };\n        return {\n            hour: isIn(tf, 'h'),\n            minute: isIn(tf, 'm'),\n            second: isIn(tf, 's'),\n            millisec: isIn(tf, 'l'),\n            microsec: isIn(tf, 'c'),\n            timezone: isIn(tf, 'z'),\n            ampm: isIn(tf, 't') && isIn(timeFormat, 'h'),\n            iso8601: isIn(timeFormat, 'Z')\n        };\n    };\n\n    /*\n     * Converts 24 hour format into 12 hour\n     * Returns 12 hour without leading 0\n     */\n    var convert24to12 = function(hour) {\n        hour %= 12;\n\n        if (hour === 0) {\n            hour = 12;\n        }\n\n        return String(hour);\n    };\n\n    var computeEffectiveSetting = function(settings, property) {\n        return settings && settings[property] ? settings[property] : $.timepicker._defaults[property];\n    };\n\n    /*\n     * Splits datetime string into date and time substrings.\n     * Throws exception when date can't be parsed\n     * Returns {dateString: dateString, timeString: timeString}\n     */\n    var splitDateTime = function(dateTimeString, timeSettings) {\n        // The idea is to get the number separator occurrences in datetime and the time format requested (since time has\n        // fewer unknowns, mostly numbers and am/pm). We will use the time pattern to split.\n        var separator = computeEffectiveSetting(timeSettings, 'separator'),\n            format = computeEffectiveSetting(timeSettings, 'timeFormat'),\n            timeParts = format.split(separator), // how many occurrences of separator may be in our format?\n            timePartsLen = timeParts.length,\n            allParts = dateTimeString.split(separator),\n            allPartsLen = allParts.length;\n\n        if (allPartsLen > 1) {\n            return {\n                dateString: allParts.splice(0, allPartsLen - timePartsLen).join(separator),\n                timeString: allParts.splice(0, timePartsLen).join(separator)\n            };\n        }\n\n        return {\n            dateString: dateTimeString,\n            timeString: ''\n        };\n    };\n\n    /*\n     * Internal function to parse datetime interval\n     * Returns: {date: Date, timeObj: Object}, where\n     *   date - parsed date without time (type Date)\n     *   timeObj = {hour: , minute: , second: , millisec: , microsec: } - parsed time. Optional\n     */\n    var parseDateTimeInternal = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {\n        var date,\n            parts,\n            parsedTime;\n\n        parts = splitDateTime(dateTimeString, timeSettings);\n        date = $.datepicker._base_parseDate(dateFormat, parts.dateString, dateSettings);\n\n        if (parts.timeString === '') {\n            return {\n                date: date\n            };\n        }\n\n        parsedTime = $.datepicker.parseTime(timeFormat, parts.timeString, timeSettings);\n\n        if (!parsedTime) {\n            throw 'Wrong time format';\n        }\n\n        return {\n            date: date,\n            timeObj: parsedTime\n        };\n    };\n\n    /*\n     * Internal function to set timezone_select to the local timezone\n     */\n    var selectLocalTimezone = function(tp_inst, date) {\n        if (tp_inst && tp_inst.timezone_select) {\n            var now = date || new Date();\n            tp_inst.timezone_select.val(-now.getTimezoneOffset());\n        }\n    };\n\n    /*\n     * Create a Singleton Instance\n     */\n    $.timepicker = new Timepicker();\n\n    /**\n     * Get the timezone offset as string from a date object (eg '+0530' for UTC+5.5)\n     * @param {number} tzMinutes if not a number, less than -720 (-1200), or greater than 840 (+1400) this value is returned\n     * @param {boolean} iso8601 if true formats in accordance to iso8601 \"+12:45\"\n     * @return {string}\n     */\n    $.timepicker.timezoneOffsetString = function(tzMinutes, iso8601) {\n        if (isNaN(tzMinutes) || tzMinutes > 840 || tzMinutes < -720) {\n            return tzMinutes;\n        }\n\n        var off = tzMinutes,\n            minutes = off % 60,\n            hours = (off - minutes) / 60,\n            iso = iso8601 ? ':' : '',\n            tz = (off >= 0 ? '+' : '-') + ('0' + Math.abs(hours)).slice(-2) + iso + ('0' + Math.abs(minutes)).slice(-2);\n\n        if (tz === '+00:00') {\n            return 'Z';\n        }\n        return tz;\n    };\n\n    /**\n     * Get the number in minutes that represents a timezone string\n     * @param  {string} tzString formatted like \"+0500\", \"-1245\", \"Z\"\n     * @return {number} the offset minutes or the original string if it doesn't match expectations\n     */\n    $.timepicker.timezoneOffsetNumber = function(tzString) {\n        var normalized = tzString.toString().replace(':', ''); // excuse any iso8601, end up with \"+1245\"\n\n        if (normalized.toUpperCase() === 'Z') { // if iso8601 with Z, its 0 minute offset\n            return 0;\n        }\n\n        if (!/^(\\-|\\+)\\d{4}$/.test(normalized)) { // possibly a user defined tz, so just give it back\n            return tzString;\n        }\n\n        return ((normalized.substr(0, 1) === '-' ? -1 : 1) * // plus or minus\n            ((parseInt(normalized.substr(1, 2), 10) * 60) + // hours (converted to minutes)\n                parseInt(normalized.substr(3, 2), 10))); // minutes\n    };\n\n    /**\n     * No way to set timezone in js Date, so we must adjust the minutes to compensate. (think setDate, getDate)\n     * @param  {Date} date\n     * @param  {string} toTimezone formatted like \"+0500\", \"-1245\"\n     * @return {Date}\n     */\n    $.timepicker.timezoneAdjust = function(date, toTimezone) {\n        var toTz = $.timepicker.timezoneOffsetNumber(toTimezone);\n        if (!isNaN(toTz)) {\n            date.setMinutes(date.getMinutes() + -date.getTimezoneOffset() - toTz);\n        }\n        return date;\n    };\n\n    /**\n     * Calls `timepicker()` on the `startTime` and `endTime` elements, and configures them to\n     * enforce date range limits.\n     * n.b. The input value must be correctly formatted (reformatting is not supported)\n     * @param  {Element} startTime\n     * @param  {Element} endTime\n     * @param  {Object} options Options for the timepicker() call\n     * @return {jQuery}\n     */\n    $.timepicker.timeRange = function(startTime, endTime, options) {\n        return $.timepicker.handleRange('timepicker', startTime, endTime, options);\n    };\n\n    /**\n     * Calls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to\n     * enforce date range limits.\n     * @param  {Element} startTime\n     * @param  {Element} endTime\n     * @param  {Object} options Options for the `timepicker()` call. Also supports `reformat`,\n     *   a boolean value that can be used to reformat the input values to the `dateFormat`.\n     * @param  {string} method Can be used to specify the type of picker to be added\n     * @return {jQuery}\n     */\n    $.timepicker.datetimeRange = function(startTime, endTime, options) {\n        $.timepicker.handleRange('datetimepicker', startTime, endTime, options);\n    };\n\n    /**\n     * Calls `datepicker` on the `startTime` and `endTime` elements, and configures them to\n     * enforce date range limits.\n     * @param  {Element} startTime\n     * @param  {Element} endTime\n     * @param  {Object} options Options for the `timepicker()` call. Also supports `reformat`,\n     *   a boolean value that can be used to reformat the input values to the `dateFormat`.\n     * @return {jQuery}\n     */\n    $.timepicker.dateRange = function(startTime, endTime, options) {\n        $.timepicker.handleRange('datepicker', startTime, endTime, options);\n    };\n\n    /**\n     * Calls `method` on the `startTime` and `endTime` elements, and configures them to\n     * enforce date range limits.\n     * @param  {string} method Can be used to specify the type of picker to be added\n     * @param  {Element} startTime\n     * @param  {Element} endTime\n     * @param  {Object} options Options for the `timepicker()` call. Also supports `reformat`,\n     *   a boolean value that can be used to reformat the input values to the `dateFormat`.\n     * @return {jQuery}\n     */\n    $.timepicker.handleRange = function(method, startTime, endTime, options) {\n        options = $.extend({}, {\n            minInterval: 0, // min allowed interval in milliseconds\n            maxInterval: 0, // max allowed interval in milliseconds\n            start: {}, // options for start picker\n            end: {} // options for end picker\n        }, options);\n\n        // for the mean time this fixes an issue with calling getDate with timepicker()\n        var timeOnly = false;\n        if (method === 'timepicker') {\n            timeOnly = true;\n            method = 'datetimepicker';\n        }\n\n        function checkDates(changed, other) {\n            var startdt = startTime[method]('getDate'),\n                enddt = endTime[method]('getDate'),\n                changeddt = changed[method]('getDate');\n\n            if (startdt !== null) {\n                var minDate = new Date(startdt.getTime()),\n                    maxDate = new Date(startdt.getTime());\n\n                minDate.setMilliseconds(minDate.getMilliseconds() + options.minInterval);\n                maxDate.setMilliseconds(maxDate.getMilliseconds() + options.maxInterval);\n\n                if (options.minInterval > 0 && minDate > enddt) { // minInterval check\n                    endTime[method]('setDate', minDate);\n                } else if (options.maxInterval > 0 && maxDate < enddt) { // max interval check\n                    endTime[method]('setDate', maxDate);\n                } else if (startdt > enddt) {\n                    other[method]('setDate', changeddt);\n                }\n            }\n        }\n\n        function selected(changed, other, option) {\n            if (!changed.val()) {\n                return;\n            }\n            var date = changed[method].call(changed, 'getDate');\n            if (date !== null && options.minInterval > 0) {\n                if (option === 'minDate') {\n                    date.setMilliseconds(date.getMilliseconds() + options.minInterval);\n                }\n                if (option === 'maxDate') {\n                    date.setMilliseconds(date.getMilliseconds() - options.minInterval);\n                }\n            }\n\n            if (date.getTime) {\n                other[method].call(other, 'option', option, date);\n            }\n        }\n\n        $.fn[method].call(startTime, $.extend({\n            timeOnly: timeOnly,\n            onClose: function(dateText, inst) {\n                checkDates($(this), endTime);\n            },\n            onSelect: function(selectedDateTime) {\n                selected($(this), endTime, 'minDate');\n            }\n        }, options, options.start));\n        $.fn[method].call(endTime, $.extend({\n            timeOnly: timeOnly,\n            onClose: function(dateText, inst) {\n                checkDates($(this), startTime);\n            },\n            onSelect: function(selectedDateTime) {\n                selected($(this), startTime, 'maxDate');\n            }\n        }, options, options.end));\n\n        checkDates(startTime, endTime);\n\n        selected(startTime, endTime, 'minDate');\n        selected(endTime, startTime, 'maxDate');\n\n        return $([startTime.get(0), endTime.get(0)]);\n    };\n\n    /**\n     * Log error or data to the console during error or debugging\n     * @param  {Object} err pass any type object to log to the console during error or debugging\n     * @return {void}\n     */\n    $.timepicker.log = function() {\n        if (window.console) {\n            window.console.log.apply(window.console, Array.prototype.slice.call(arguments));\n        }\n    };\n\n    /*\n     * Add util object to allow access to private methods for testability.\n     */\n    $.timepicker._util = {\n        _extendRemove: extendRemove,\n        _isEmptyObject: isEmptyObject,\n        _convert24to12: convert24to12,\n        _detectSupport: detectSupport,\n        _selectLocalTimezone: selectLocalTimezone,\n        _computeEffectiveSetting: computeEffectiveSetting,\n        _splitDateTime: splitDateTime,\n        _parseDateTimeInternal: parseDateTimeInternal\n    };\n\n    /*\n     * Microsecond support\n     */\n    if (!Date.prototype.getMicroseconds) {\n        Date.prototype.microseconds = 0;\n        Date.prototype.getMicroseconds = function() {\n            return this.microseconds;\n        };\n        Date.prototype.setMicroseconds = function(m) {\n            this.setMilliseconds(this.getMilliseconds() + Math.floor(m / 1000));\n            this.microseconds = m % 1000;\n            return this;\n        };\n    }\n\n    /*\n     * Keep up with the version\n     */\n    $.timepicker.version = \"1.6.1\";\n\n}));\n"]}